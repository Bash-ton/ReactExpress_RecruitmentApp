{"version":3,"sources":["Model/apiCall.js","Model/model.js","Views/Expertise.js","Model/Redux/Actions/AuthActions.js","Views/Authentication.js","Views/SignUpAdmin.js","Views/ApplicationElement.js","Views/ApplicationList.js","Views/AdminApplications.js","Views/Header.js","App.js","reportWebVitals.js","Model/Redux/Reducers/UserReducer.js","Model/Redux/Reducers/index.js","Model/Redux/index.js","index.js"],"names":["ApiCall","axios","create","baseURL","withCredentials","credentials","headers","model","this","myExpertise","observers","name","filter","exp","notifyObserver","t","y","year","obs","concat","removeObserver","forEach","callback","o","Expertise","apiCall","isLoggedIn","useSelector","state","UserReducer","userInfo","role","useState","hasApplication","setHasApplication","apiAxios","get","then","r","console","log","status","catch","err","useEffect","window","location","getAllExpertise","allExpertise","setExpertice","getExpertise","setMyExpertise","addObserver","localStorage","setItem","instance","removeExpertise","n","expertise","addExpertise","done","info","post","startPeriod","start","endPeriod","end","dateOfBirth","month","day","firstName","fname","lastName","lname","competence","email","removeOption","e","removeSelectedExpertise","ExpertiseView","map","onClick","AddExpertiseForm","setYear","type","setType","setStart","setEnd","min","placeholder","onChange","event","target","value","k","confirm","signIn","user","dispatch","getState","data","Authentication","authStatus","setAuthStatus","changeAuthStatus","setChangeAuthStatus","useDispatch","AuthTextField","props","useField","field","meta","errorText","error","touched","TextField","helperText","AuthSchema","Yup","shape","required","password","of","max","className","initialValues","username","onSubmit","setSubmitting","resetForm","response","response1","alert","validationSchema","values","isSubmitting","errors","Button","disabled","JSON","stringify","SignUpAdmin","adminKey","as","url","ApplicationElement","item","comp","date","updateStatus","selected","id","ApplicationList","applications","AdminApplications","result","setResult","CustomCheckboxes","label","FormControlLabel","control","Checkbox","competences","param","length","Header","App","Model","exact","path","render","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","action","AllReducers","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","ReduxStore","createStore","applyMiddleware","thunk","Persistor","persistStore","ReactDOM","store","loading","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.5c1ff215.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/**\n * Model that handles all axios HTTP calls to the express API.\n * Contains the base URL to the express API\n */\nexport default class ApiCall {\n    constructor() {\n\n    }\n\n    apiAxios() {\n        return axios.create({\n            baseURL: \"/\",\n            withCredentials: true,\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n    }\n\n\n}\n      ","/**\n * Model that contains all available skills and current skills stored in the frontend\n */\nexport default class model{\n    constructor(){\n        this.myExpertise = [];\n        this.observers = [];\n    }\n    getExpertise(){\n        return this.myExpertise;\n    }\n    removeExpertise(name){\n\t\tthis.myExpertise = [...this.myExpertise.filter((exp) => exp.name !== name)];\n        this.notifyObserver();\n    }\n    addExpertise(t, y){\n        var exp = {name: t, year: y};\n        this.myExpertise = [...this.myExpertise, exp];\n        this.notifyObserver();\n    }\n    getAllExpertise(){\n        const exp = [\"A-skills\", \"B-skills\", \"C-skills\", \"D-skills\", \"E-skills\"];\n        return exp;\n    }\n\n    addObserver(obs){\n        this.observers = this.observers.concat(obs);\n        return () => this.removeObserver(obs);\n    }\n    \n    notifyObserver(){\n        this.observers.forEach(function(callback) {\n            callback();\n        });    \n    }\n    removeObserver(obs) {\n        this.observers = this.observers.filter(o => o !== obs)\n    }\n\n}","import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\n\n/**\n * Renders all views related to the client page.\n * @param model a model document used to get available skills and handle all skills in current application in progress before submitting\n * @param apiCall a model document handling all axios calls to the express API\n * @returns {JSX.Element} renders all views on the client page\n */\nfunction Expertise({model, apiCall}) {\n    //constants from redux store\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\n    const [hasApplication, setHasApplication] = useState(false);\n\n    //event handler checking if user already has made an application\n    const instance2 = apiCall.apiAxios();\n    instance2.get(\"posts/postEmail=client@kth.se\").then(r => (\n        console.log(r.status),\n            console.log(r),\n            setHasApplication(true)\n    )).catch(err => {\n        console.log(err)\n        setHasApplication(false)\n    })\n\n\n    //lifecycle methods\n    useEffect(() => {\n        if ((role !== \"client\") || (isLoggedIn === false))\n            window.location = \"/\"\n    }, [isLoggedIn, role])\n    useEffect(() => {\n        if ((role !== \"client\") || (isLoggedIn === false))\n            window.location = \"/\"\n    }, [])\n\n    const [allExpertise, setExpertice] = useState(model.getAllExpertise());\n    useEffect(() => setExpertice(model.getAllExpertise()), []);\n\n    const [myExpertise, setMyExpertise] = useState(model.getExpertise());\n    useEffect(function () {\n        return model.addObserver(function () {\n            setMyExpertise(model.getExpertise());\n        })\n    }, [model]);\n\n    //Ta bort: Modellen bestämmer om den vill läsa från localstorage eller inte.......\n    useEffect(() => localStorage.setItem('formData', myExpertise));\n\n    // eventhandlers\n    //remove selected state when chosen?\n    const removeSelectedExpertise = e => {\n        const exp = allExpertise.filter(name => name !== e);\n        setExpertice(exp);\n    }\n    const instance = apiCall.apiAxios();\n\n    return (\n        <div>\n            {((role === \"client\") && (isLoggedIn === true)) ?\n                <div>\n                    {!hasApplication ?\n                        <div>\n                            <ExpertiseView myExpertise={myExpertise} removeExpertise={n => {\n                                model.removeExpertise(n);\n                                setExpertice([...allExpertise, n])\n                            }}/>\n                            <AddExpertiseForm expertise={allExpertise}\n                                              addExpertise={(t, y) => model.addExpertise(t, y)}\n                                              done={(info) => instance.post('posts', {\n                                                  startPeriod: info.start,\n                                                  endPeriod: info.end,\n                                                  dateOfBirth: {\n                                                      year: info.dateOfBirth.year,\n                                                      month: info.dateOfBirth.month,\n                                                      day: info.dateOfBirth.day\n                                                  },\n                                                  status: \"unhandled\",\n                                                  firstName: info.fname,\n                                                  lastName: info.lname,\n                                                  competence: myExpertise,\n                                                  email: info.email,\n                                              })}\n                                              removeOption={(name) => removeSelectedExpertise(name)}\n                            /></div>\n                        : <div>You have already made an application. Please wait for us to give you a response</div>}\n                </div> : \"\"}\n        </div>\n    )\n}\n\n/**\n * This component renders the current skills in progress before submitting it\n * @param myExpertise object that contains all skills currently in the application\n * @param removeExpertise method used to remove skills from application\n * @returns {JSX.Element} renders a list of current skills in application\n */\nconst ExpertiseView = ({myExpertise, removeExpertise}) => (\n    <div>\n        {myExpertise.map(e =>\n            <tbody>\n            <tr key={e.name + e.year}>\n                <td>{e.name}</td>\n                <td>{e.year}</td>\n            </tr>\n            <button onClick={() => removeExpertise(e.name)}>remove</button>\n            </tbody>\n        )}\n    </div>\n);\n\n\n/**\n * A form that lets user input all relevant information used to create an application\n * @param expertise all currently available skills to choose from in the application\n * @param addExpertise method used to add a skill to the application\n * @param done method used so submit the application\n * @param removeOption method that removes one available skill from the {expertise} object when that skill already has been added to the form\n * @returns {JSX.Element} render the form to input skills to the application\n */\n const AddExpertiseForm = ({expertise, addExpertise, done, removeOption}) => {\n\n    const userInfo = useSelector(state => state.UserReducer.userInfo)\n    console.log(userInfo)\n    const handleSubmit = () => {\n        let ans = window.confirm(\"Are you sure you want to submit your application?\");\n        if (ans === true) {\n            //console.log(userInfo[0].dateOfBirth);\n            //debugger;\n            done({\n                start: start,\n                end: end,\n                fname: userInfo[0].fname,\n                lname: userInfo[0].lname,\n                status: \"unhandled\",\n                dateOfBirth: userInfo[0].dateOfBirth,\n                email: userInfo[0].email\n            });\n        }\n    }\n\n    const [year, setYear] = useState(0);\n    const [type, setType] = useState('');\n    const [start, setStart] = useState(\"\");\n    const [end, setEnd] = useState(\"\");\n    return (\n        <div>\n            <input type=\"number\" min=\"0\" placeholder=\"years of experience\"\n                   onChange={(event) => setYear(event.target.value)}/>\n            <select onChange={(event) => setType(event.target.value)}>\n                <option>choose your expertise</option>\n                {expertise.map((k) => <option key={k}>{k}</option>)}\n            </select>\n            <button onClick={() => {\n                addExpertise(type, year);\n                removeOption(type)\n            }}>add skill to application\n            </button>\n\n            <div>\n                <br/>\n                <input type=\"text\" min=\"0\" placeholder=\"available start period\" onChange={(event) => {\n                    setStart(event.target.value)\n                }}/>\n                <input type=\"text\" min=\"0\" placeholder=\"available end period\" onChange={(event) => {\n                    setEnd(event.target.value)\n                }}/>\n                <button onClick={() => {\n                    handleSubmit();\n                }}>confirm and send application\n                </button>\n            </div>\n\n\n        </div>\n    );\n};\n\nexport {Expertise}; \n","/**\n * Redux action for signup\n * @param user object containing user information\n * @returns {function(*, *): void} a dispatch call to {UserReducer}\n */\nexport const signIn = (user) => {\n    return (dispatch, getState) => {\n        dispatch({type:\"LOG_IN_USER\", role:user.data.role, fname:user.data.firstName, lname: user.data.lastName, dateOfBirth: user.data.dateOfBirth, email: user.data.email})\n    }\n}\n\n/**\n * Redux action that sing out a user\n * @returns {function(*, *): void} a dispatch call to {UserReducer}\n */\nexport const signOut = () => {\n    return (dispatch, getState) => {\n        dispatch({type:\"LOG_OUT_USER\"})\n    }\n}","import React, {useEffect, useState} from 'react'\nimport {Form, Formik, useField} from \"formik\";\nimport {TextField, Button, Select, MenuItem} from \"@material-ui/core\";\nimport * as Yup from \"yup\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {signIn} from \"../Model/Redux/Actions/AuthActions\";\nimport \"./css/login-signup.css\";\n\n//TODO remove the <Pre-tags> when done testing\n\n/**\n * This is the authentication page that handles login and signup including validation.\n * @param apiCall a model document containingn axios calls to the express rest API\n * @returns {JSX.Element} renders login and signup form\n */\nconst Authentication = ({apiCall}) => {\n\n    //constants from useState and redux\n    const [authStatus, setAuthStatus] = useState(\"Sign up\");\n    const [changeAuthStatus, setChangeAuthStatus] = useState(\"Login\");\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\n    const dispatch = useDispatch();\n\n\n    //life cycle methods\n    useEffect(() => {\n        if (role === \"client\") {\n            window.location = \"/user/application\";\n\n        } else if (role === \"admin\") {\n            window.location = \"/admin/applications\";\n\n        }\n    }, [isLoggedIn])\n\n\n\n    //custom formik components\n    const AuthTextField = ({\n                               placeholder,\n                               ...props\n                           }) => {\n        const [field, meta] = useField(props);\n        const errorText = meta.error && meta.touched ? meta.error : \"\";\n        return (\n            <TextField\n                placeholder={placeholder}\n                {...field}\n                helperText={errorText}\n                error={!!errorText}//casting string to boolean\n                type={props.type}\n            />\n        )\n    }\n    //yup schema for validation\n    const AuthSchema = Yup.object().shape({\n        email: Yup.string()\n            .min(4, 'Too Short!')\n            .required('Required')\n            .email('Invalid email'),\n        password: Yup.string()\n            .min(4, 'Too Short!')\n            .required('Required'),\n        firstName: (authStatus === \"Login\")\n            ? Yup.string()\n            : Yup.string()\n                .required('Required'),\n        lastName: (authStatus === \"Login\")\n            ? Yup.string()\n            : Yup.string()\n                .required('Required'),\n        dateOfBirth: Yup.array()\n            .of(\n                Yup.object().shape({\n                    year: (authStatus === \"Login\")\n                        ? Yup.number()\n                        : Yup.number().required('Required'),\n                    month: (authStatus === \"Login\")\n                        ? Yup.number()\n                        : (Yup.number()\n                            .min(1, \"must be between 1 and 12\")\n                            .max(12, \"must be between 1 and 31\")\n                            .required('Required')),\n                    day: (authStatus === \"Login\")\n                        ? Yup.number()\n                        : Yup.number()\n                            .min(1, \"must be between 1 and 31\")\n                            .max(31, \"must be between 1 and 31\")\n                            .required('Required'),\n                })\n            )\n    })\n\n    //event handlers\n    const handleAuthStatusChange = () => {\n        if (authStatus === \"Login\") {\n            setAuthStatus(\"Sign up\")\n            setChangeAuthStatus(\"Login\")\n        } else {\n            setAuthStatus(\"Login\")\n            setChangeAuthStatus(\"Sign up\")\n        }\n    }\n\n\n    return (\n        <div className=\"outer-wrapper\">\n            {!isLoggedIn\n                ? <div className=\"inner-wrapper\" >\n                    <Formik\n                        initialValues={{\n                            username: \"\",\n                            email: \"\",\n                            password: \"\",\n                            firstName: \"\",\n                            lastName: \"\",\n                            dateOfBirth: [{year: \"\", month: \"\", day: \"\"}]\n                        }}\n                        onSubmit={(data, {setSubmitting, resetForm}) => {\n                            setSubmitting(true);\n                            resetForm();\n\n                            if (authStatus === \"Sign up\") {\n                                const instance = apiCall.apiAxios();\n\n                                instance.post('auth/register', {data})\n                                    .then((response) => {\n\n                                        const instance = apiCall.apiAxios();\n                                        instance.post('auth/login', {email: data.email, password: data.password})\n                                            .then((response1) => {\n                                                dispatch(signIn(response1))\n                                            }, (error) => {\n                                                console.log(error);\n                                            });\n\n                                    }, (err) => {\n                                        console.log(err);\n                                        alert(\"email already in use\");\n                                    });\n                            } else {\n                                const instance = apiCall.apiAxios();\n                                instance.post('auth/login', {email: data.email, password: data.password})\n                                    .then((response1) => {\n\n                                        dispatch(signIn(response1))\n\n                                    }, () => {\n                                        alert(\"Wrong email and/or password\");\n                                    });\n                            }\n                            setSubmitting(false);\n                        }}\n                        validationSchema={AuthSchema}\n                    >\n                        {({values, isSubmitting, resetForm, errors}) => (\n                            \n                       \n                            <Form >\n                                  {(authStatus === \"Sign up\") ? <div>\n                                  <p>Create an account</p>\n                                </div> : <div>Log in</div>}\n                                <div>\n                                    <AuthTextField\n                                        placeholder=\"Email\"\n                                        name=\"email\"\n                                        type=\"input\"\n                                    />\n                                </div>\n                                <div>\n                                    <AuthTextField\n                                        placeholder=\"Password\"\n                                        name=\"password\"\n                                        type=\"password\"\n                                    />\n                                </div>\n                                {(authStatus === \"Sign up\") ? <div>\n                                    <AuthTextField\n                                        placeholder=\"Username\"\n                                        name=\"username\"\n                                        type=\"input\"\n                                    />\n                                </div> : \"\"}\n                                {(authStatus === \"Sign up\") ? <div>\n                                    <AuthTextField\n                                        placeholder=\"First Name\"\n                                        name=\"firstName\"\n                                        type=\"input\"\n                                    />\n                                </div> : \"\"}\n                                {(authStatus === \"Sign up\") ? <div>\n                                    <AuthTextField\n                                        placeholder=\"Last Name\"\n                                        name=\"lastName\"\n                                        type=\"input\"\n                                    />\n                                </div> : \"\"}<br/>\n                                {(authStatus === \"Sign up\") ? <div>\n                                    <AuthTextField\n                                        placeholder=\"Year\"\n                                        name=\"dateOfBirth[0].year\"\n                                        type=\"number\"\n                                    /><br/>\n                                    <AuthTextField\n                                        placeholder=\"Month\"\n                                        name=\"dateOfBirth[0].month\"\n                                        type=\"number\"\n                                    /><br/>\n                                    <AuthTextField\n                                        placeholder=\"Day\"\n                                        name=\"dateOfBirth[0].day\"\n                                        type=\"number\"\n                                    />\n                                </div> : \"\"}\n                                <div>\n                                    <Button disabled={isSubmitting} type=\"submit\">{authStatus}</Button>\n                                </div>\n                                \n\n                                <pre>{JSON.stringify(values, null, 2)}</pre>\n                                <pre>{JSON.stringify(errors, null, 2)}</pre>\n\n\n                                <div onClick={() => {\n                                    handleAuthStatusChange();\n                                    resetForm()\n                                }}>{changeAuthStatus}</div>\n                            </Form>\n                        )}\n                    </Formik>\n\n\n                </div>\n                : \"\"}\n        </div>\n    )\n}\nexport default Authentication;","import React from 'react'\nimport {Field, Form, Formik} from \"formik\";\nimport { TextField, Button } from \"@material-ui/core\";\n\n//TODO not used remove this later\nconst SignUpAdmin = () =>{\n\n    //event handlers\n    const changeView = (url) => {\n        window.location =  url\n    }\n    return (\n        <div className=\"wrapper\">\n            <Formik\n                initialValues={{ email: \"\", password: \"\", adminKey: \"\"}}\n                onSubmit={( data, { setSubmitting , resetForm}) =>{\n                    setSubmitting(true);\n                    resetForm();\n                    //make async calls here to auth\n                    console.log(\"submit:\", data);\n                    setSubmitting(false);\n                } }\n            >\n                {({  values, isSubmitting  })  => (\n                    <div >\n                    <Form >\n                        <div >\n                        <Field\n                            placeholder=\"Email\"\n                            name=\"email\"\n                            type=\"input\"\n                            as={TextField}\n                        />\n                        </div>\n                        <div>\n                            <Field\n                                placeholder=\"Password\"\n                                name=\"password\"\n                                type=\"password\"\n                                as={TextField}\n                            />\n                        </div>\n                        <div>\n                            <Field\n                                placeholder=\"Key\"\n                                name=\"adminKey\"\n                                type=\"password\"\n                                as={TextField}\n                            />\n                        </div>\n                        <div>\n                            <Button disabled={isSubmitting} type=\"submit\">Sign up</Button>\n                        </div>\n                        <pre>{JSON.stringify(values, null, 2)}</pre>\n\n                    </Form>\n                    </div>\n                )}\n\n\n            </Formik>\n            <div onClick={()=>{changeView(\"/\")}}>log in</div>\n\n        </div>\n    )\n}\n\nexport default SignUpAdmin;","import React from \"react\";\n\n/**\n * This component renders one row in the admin applications list. Each row shows all relevant information about said application\n * @param apiCall a model document containing axios api calls to the express app\n * @param item all info about one application ie one row in the list\n * @returns {JSX.Element} renders one row in the admin applications list\n * @constructor\n */\nconst ApplicationElement = ({apiCall, item}) => {\n\n    const updateStatus = (event) => {\n        const instance = apiCall.apiAxios();\n        instance.post('posts/application', {status: event.target.value, email: item.email})\n            .then((response) => {\n                console.log(response)\n\n            }, (error) => {\n                console.log(error);\n            });\n    }\n\n\n    return (\n        <tr key={item.id}>\n            <td>{item.firstName}</td>\n            <td>{item.lastName}</td>\n            <td>{item.competence?.map(comp =>{\n                return(\n                    <div>{comp.name} {comp.year} year(s)</div>\n                )\n            })}</td>\n            <td>{item.startPeriod}</td>\n            <td>{item.endPeriod}</td>\n            <td>{item.dateOfBirth?.map(comp =>{\n                return(\n                    <div>{comp.year}-{comp.month}-{comp.day} </div>\n                )\n            })}</td>\n            <td>{item.date}</td>\n            <td><select name=\"status\" onChange={(event)=>{ updateStatus(event) }}>\n\n                {(item.status === \"unhandled\")?\n                    <option selected=\"selected\" value=\"unhandled\">unhandled</option>\n                :<option value=\"unhandled\">unhandled</option>}\n\n                {(item.status === \"rejected\")?\n                    <option selected=\"selected\" value=\"rejected\">rejected</option>\n                    :<option value=\"rejected\">rejected</option>}\n\n                {(item.status === \"accepted\")?\n                    <option selected=\"selected\" value=\"accepted\">accepted</option>\n                    :<option value=\"accepted\">accepted</option>}\n            </select></td>\n        </tr>\n    )\n\n}\n\nexport default ApplicationElement;","import React from \"react\"\nimport ApplicationElement from \"./ApplicationElement\";\nimport \"./css/ApplicationList.css\"\n\n/**\n * The admin application list header.\n * @param applications an object containing all applications that the page should render in a list\n * @returns {JSX.Element} renders a list header and calls the <ApplicationElement/> component to render all rows\n */\nconst ApplicationList = ({apiCall, applications} ) => {\n\n    return(\n        <table className=\"content-table\">\n            <thead>\n            <tr>\n                <th>fname</th>\n                <th>lname</th>\n                <th>skills</th>\n                <th>startP</th>\n                <th>endP</th>\n                <th>date of birth</th>\n                <th>application made at</th>\n                <th>application status</th>\n            </tr>\n            </thead>\n            <tbody>\n            {applications?.map(item =>{\n                return(\n                    <ApplicationElement apiCall={apiCall} item={item}/>\n                )\n            })}\n            </tbody>\n        </table>\n    )\n}\n\nexport default ApplicationList;","import React, {useEffect, useState} from \"react\"\nimport { Form, Formik, useField } from \"formik\";\nimport {Button, Checkbox, FormControlLabel} from \"@material-ui/core\";\nimport ApplicationList from \"./ApplicationList\";\nimport {useSelector} from \"react-redux\";\n\n/**\n * Handles the admin page.\n * A logged in admin may go through all applications and sort by skills\n * The admin can also give a status to an application (accepted, unhandled, rejected)\n * @param apiCall model that handles axios api calls to the backend REST API\n * @returns {JSX.Element} renders the Admin page showing applications\n */\nconst AdminApplications = ({apiCall}) => {\n    //constants from useState and redux\n    const [result, setResult] = useState([])\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\n\n\n    //life cycle methods\n    useEffect(() => {\n        if ((role !== \"admin\") || (isLoggedIn === false))\n            window.location = \"/\"\n    }, [isLoggedIn, role])\n\n\n    //custom formik components\n    const CustomCheckboxes = ({label, ...props}) => {\n        const [field] = useField(props);\n        return <FormControlLabel {...field} control={<Checkbox/>} label={label}/>;\n    }\n\n\n    return (\n        <div>\n            {(role === \"admin\") && (isLoggedIn === true)\n                ? <div>\n                    <Formik\n                        initialValues={{\n\n                            competences: []\n\n                        }}\n                        onSubmit={(data, {setSubmitting}) => {\n                            setSubmitting(true);\n                            let param = \"posts\"\n                             if (data.competences.length === 1) {\n                                param = \"posts/competence=\" + data.competences[0];\n                            }\n                            else if (data.competences.length === 2) {\n                                param = \"posts/competence=\" + data.competences[0] + \"&=\" + data.competences[1];\n                              \n                            } \n                            else if (data.competences.length === 3) {\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2];\n                            }\n                            else if (data.competences.length === 4) {\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2]+ \"&=\" + data.competences[3];\n                            }\n                            else if (data.competences.length === 5) {\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2]+ \"&=\" + data.competences[3]+ \"&=\" + data.competences[4];\n                            }\n                              console.log(param)\n\n                            const instance = apiCall.apiAxios();\n                            instance.get(param).then(r =>( setSubmitting(false), setResult(r.data),setResult(r.data)))\n                        }}\n                    >\n                        {({values, isSubmitting, errors}) => (\n                            <Form>\n                                <CustomCheckboxes name=\"competences\" value=\"A-skills\" type=\"checkbox\" label=\"A-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"B-skills\" type=\"checkbox\" label=\"B-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"C-skills\" type=\"checkbox\" label=\"C-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"D-skills\" type=\"checkbox\" label=\"D-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"E-skills\" type=\"checkbox\" label=\"E-skills\"/>\n                                <Button disabled={isSubmitting} type=\"submit\">Get Applications</Button>\n                                <div>\n                                    <pre>{JSON.stringify(values, null, 2)}</pre>\n                                    <pre>{JSON.stringify(errors, null, 2)}</pre>\n                                </div>\n                            </Form>\n\n                        )}\n                    </Formik>\n                    {(result.length > 0) ? <ApplicationList apiCall={apiCall} applications={result}/> : \"\"}\n                </div>\n                : \"\"}\n        </div>\n    )\n}\n\nexport default AdminApplications;","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {signOut} from \"../Model/Redux/Actions/AuthActions\";\nimport \"./css/Header.css\";\n\n/**\n * Header component. Renders logo and logout button\n * @returns {JSX.Element} returns header, logo and logout button\n */\nconst Header = () => {\n    //constants from redux\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"Header-wrapper\">\n            <div className=\"logo\">Recruitment Logo Here</div>\n            {isLoggedIn\n                ? <button className=\"authButton\" onClick={ ()=> dispatch(signOut())  }>Log out</button>\n                : \"\"}\n        </div>\n    )\n}\n\nexport default Header;","import {Component} from \"react\";\nimport './App.css';\nimport { Route } from \"react-router-dom\"\n\n//models\nimport ApiCall from './Model/apiCall';\nimport Model from './Model/model'\n\n//presenter\nimport {Expertise} from './Views/Expertise'\n//views\nimport Authentication from \"./Views/Authentication\";\nimport SignUpAdmin from \"./Views/SignUpAdmin\";\nimport AdminApplications from \"./Views/AdminApplications\";\nimport Header from \"./Views/Header\";\n\n/**\n * Main file for the frontend\n * Handles initial import of the model and routing of the frontend app\n */\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            apiCall: new ApiCall(),\n            model: new Model()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"applicationApp\">\n                <header className=\"recruitmentApp\">\n                    <Header/>\n                </header>\n                <Route\n                    exact path=\"/\"\n                    render={() => <Authentication apiCall={this.state.apiCall}/>}\n                />\n                <Route\n                    exact path=\"/admin/signup\"\n                    render={() => <SignUpAdmin/>}\n                />\n                <Route\n                    exact path=\"/user/application\"\n                    render={() => <Expertise model={this.state.model} apiCall={this.state.apiCall}/>}\n                />\n                <Route\n                    exact path=\"/admin/applications\"\n                    render={() => <AdminApplications apiCall={this.state.apiCall}/>}\n                />\n\n            </div>\n        );\n\n    }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState =\n    {\n        userInfo: [\n            {\n                isLoggedIn: false,\n                role: null,\n                fname: \"\",\n                lname: \"\",\n                dateOfBirth: \"\",\n                email: \"\",\n            }\n        ]\n    }\n/**\n * A reducer that handles login and signup\n * @param state the current state of this reducer\n * @param action the action that is to be performed\n * @returns {{userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}]}}\n */\nconst UserReducer = (state = initState, action) => {\n    switch (action.type) {\n        case \"LOG_IN_USER\":\n            return {\n\n                userInfo: [\n                    {\n                        isLoggedIn: true,\n                        role: action.role,\n                        fname: action.fname,\n                        lname: action.lname,\n                        dateOfBirth: action.dateOfBirth,\n                        email: action.email,\n                    }\n                ]\n\n            };\n        case \"LOG_OUT_USER\":\n            return {\n\n                userInfo: [\n                    {\n                        isLoggedIn: false,\n                        role: null,\n                        fname: \"\",\n                        lname: \"\",\n                        dateOfBirth: \"\",\n                        email: \"\",\n                    }\n                ]\n\n            };\n        default:\n            return state;\n\n    }\n}\n\nexport default UserReducer;","import { combineReducers } from \"redux\";\nimport UserReducer from \"./UserReducer\";\n\n/**\n * This component combines all reducers in this Redux store\n * @type {Reducer<CombinedState<{UserReducer: ({userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}]}|{userInfo: [{fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}]}|{userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: string}]}|{userInfo: [{fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}]})}>>}\n */\nexport const AllReducers = combineReducers({\n    UserReducer\n})","import {applyMiddleware, compose, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport { AllReducers } from \"./Reducers\"\n\n/**\n * Config Used to persist the redux store\n * @type {{storage, key: string}}\n */\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\n/**\n * A persisted combined reducer\n * @type {Reducer<CombinedState<{UserReducer: ({userInfo: {fname: (string|*), lname: (string|*), role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}[]}|{userInfo: {fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}[]}|{userInfo: {fname: (string|*), lname: (string|*), role: *, isLoggedIn: boolean, dateOfBirth: *, email: string}[]})}> & PersistPartial, unknown>}\n */\nconst persistedReducer = persistReducer(persistConfig, AllReducers)\n\n\nexport const ReduxStore = createStore(persistedReducer, applyMiddleware(thunk));\nexport const Persistor = persistStore(ReduxStore)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {ReduxStore, Persistor} from \"./Model/Redux\"\nimport {BrowserRouter} from \"react-router-dom\";\nimport {PersistGate} from 'redux-persist/integration/react'\n\n\nReactDOM.render(\n    <Provider store={ReduxStore}>\n        <PersistGate loading={null} persistor={Persistor}>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}