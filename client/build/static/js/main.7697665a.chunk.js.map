{"version":3,"sources":["Model/apiCall.js","Model/model.js","Views/Expertise.js","Model/Redux/Actions/AuthActions.js","Views/Authentication.js","Views/SignUpAdmin.js","Views/ApplicationElement.js","Views/ApplicationList.js","Views/AdminApplications.js","Views/Header.js","App.js","reportWebVitals.js","Model/Redux/Reducers/UserReducer.js","Model/Redux/Reducers/index.js","Model/Redux/index.js","Views/ErrorHandler.js","index.js"],"names":["ApiCall","axios","create","baseURL","withCredentials","credentials","headers","model","this","myExpertise","observers","name","filter","exp","notifyObserver","t","y","year","obs","concat","removeObserver","forEach","callback","o","Expertise","apiCall","isLoggedIn","useSelector","state","UserReducer","userInfo","role","email","useState","hasApplication","setHasApplication","history","useHistory","apiAxios","get","then","r","console","log","status","catch","err","response","replace","location","pathname","errorStatusCode","useEffect","window","getAllExpertise","allExpertise","setExpertice","getExpertise","setMyExpertise","addObserver","localStorage","setItem","instance","removeExpertise","n","expertise","addExpertise","done","info","post","startPeriod","start","endPeriod","end","dateOfBirth","month","day","firstName","fname","lastName","lname","competence","removeOption","e","removeSelectedExpertise","ExpertiseView","map","onClick","AddExpertiseForm","setYear","type","setType","setStart","setEnd","min","placeholder","onChange","event","target","value","k","confirm","signIn","user","dispatch","getState","data","Authentication","authStatus","setAuthStatus","changeAuthStatus","setChangeAuthStatus","useDispatch","isLoading","setLoading","AuthTextField","props","useField","field","meta","errorText","error","touched","TextField","helperText","AuthSchema","Yup","shape","required","password","of","max","className","visible","color","height","width","initialValues","username","onSubmit","setSubmitting","resetForm","response1","alert","validationSchema","values","isSubmitting","errors","Button","disabled","JSON","stringify","SignUpAdmin","adminKey","as","url","ApplicationElement","item","comp","date","updateStatus","selected","id","ApplicationList","applications","AdminApplications","result","setResult","CustomCheckboxes","label","FormControlLabel","control","Checkbox","competences","param","length","Header","App","Model","exact","path","render","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","action","AllReducers","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","ReduxStore","createStore","applyMiddleware","thunk","Persistor","persistStore","ErrorHandler","children","useLocation","to","ReactDOM","store","loading","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.7697665a.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/**\n * Model that handles all axios HTTP calls to the express API.\n * Contains the base URL to the express API\n */\nexport default class ApiCall {\n    constructor() {\n\n    }\n\n    apiAxios() {\n        return axios.create({\n            baseURL: \"/\",\n            withCredentials: true,\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n    }\n\n\n}\n      ","/**\n * Model that contains all available skills and current skills stored in the frontend\n */\nexport default class model{\n    constructor(){\n        this.myExpertise = [];\n        this.observers = [];\n    }\n    getExpertise(){\n        return this.myExpertise;\n    }\n    removeExpertise(name){\n\t\tthis.myExpertise = [...this.myExpertise.filter((exp) => exp.name !== name)];\n        this.notifyObserver();\n    }\n    addExpertise(t, y){\n        var exp = {name: t, year: y};\n        this.myExpertise = [...this.myExpertise, exp];\n        this.notifyObserver();\n    }\n    getAllExpertise(){\n        const exp = [\"A-skills\", \"B-skills\", \"C-skills\", \"D-skills\", \"E-skills\"];\n        return exp;\n    }\n\n    addObserver(obs){\n        this.observers = this.observers.concat(obs);\n        return () => this.removeObserver(obs);\n    }\n    \n    notifyObserver(){\n        this.observers.forEach(function(callback) {\n            callback();\n        });    \n    }\n    removeObserver(obs) {\n        this.observers = this.observers.filter(o => o !== obs)\n    }\n\n}","import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport { useHistory } from 'react-router-dom';\n\n/**\n * Renders all views related to the client page.\n * @param model a model document used to get available skills and handle all skills in current application in progress before submitting\n * @param apiCall a model document handling all axios calls to the express API\n * @returns {JSX.Element} renders all views on the client page\n */\nfunction Expertise({model, apiCall}) {\n    //constants from redux store\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\n    const email = useSelector(state => state.UserReducer.userInfo[0].email);\n    const [hasApplication, setHasApplication] = useState(false);\n    const history = useHistory();\n\n    //event handler checking if user already has made an application\n    const instance2 = apiCall.apiAxios();\n    instance2.get(\"posts/postEmail=\"+email).then(r => (\n        console.log(r.status),\n            console.log(r),\n            setHasApplication(true)\n    )).catch(err => {\n        setHasApplication(false)\n        //Validation error\n        if(err.response.status == 400) console.log(err)\n        //All other errors\n        else{\n            history.replace(history.location.pathname, { \n                errorStatusCode: err.response.status\n            });\n        }\n    })\n\n\n    //lifecycle methods\n    useEffect(() => {\n        if ((role !== \"client\") || (isLoggedIn === false))\n            window.location = \"/\"\n    }, [isLoggedIn, role])\n    useEffect(() => {\n        if ((role !== \"client\") || (isLoggedIn === false))\n            window.location = \"/\"\n    }, [])\n\n    const [allExpertise, setExpertice] = useState(model.getAllExpertise());\n    useEffect(() => setExpertice(model.getAllExpertise()), []);\n\n    const [myExpertise, setMyExpertise] = useState(model.getExpertise());\n    useEffect(function () {\n        return model.addObserver(function () {\n            setMyExpertise(model.getExpertise());\n        })\n    }, [model]);\n\n    //Ta bort: Modellen bestämmer om den vill läsa från localstorage eller inte.......\n    useEffect(() => localStorage.setItem('formData', myExpertise));\n\n    // eventhandlers\n    //remove selected state when chosen?\n    const removeSelectedExpertise = e => {\n        const exp = allExpertise.filter(name => name !== e);\n        setExpertice(exp);\n    }\n    const instance = apiCall.apiAxios();\n\n    return (\n        <div>\n            {((role === \"client\") && (isLoggedIn === true)) ?\n                <div>\n                    {!hasApplication ?\n                        <div>\n                            <ExpertiseView myExpertise={myExpertise} removeExpertise={n => {\n                                model.removeExpertise(n);\n                                setExpertice([...allExpertise, n])\n                            }}/>\n                            <AddExpertiseForm expertise={allExpertise}\n                                              addExpertise={(t, y) => model.addExpertise(t, y)}\n                                              done={(info) => instance.post('posts', {\n                                                  startPeriod: info.start,\n                                                  endPeriod: info.end,\n                                                  dateOfBirth: {\n                                                      year: info.dateOfBirth.year,\n                                                      month: info.dateOfBirth.month,\n                                                      day: info.dateOfBirth.day\n                                                  },\n                                                  status: \"unhandled\",\n                                                  firstName: info.fname,\n                                                  lastName: info.lname,\n                                                  competence: myExpertise,\n                                                  email: info.email,\n                                              }).catch(err => {\n                                                  //Validation error\n                                                if(err.response.status == 400) console.log(err)\n                                                //All other errors\n                                                else{\n                                                    history.replace(history.location.pathname, { \n                                                        errorStatusCode: err.response.status\n                                                    });\n                                                }\n                                              })}\n                                              removeOption={(name) => removeSelectedExpertise(name)}\n                            /></div>\n                        : <div>You have already made an application. Please wait for us to give you a response</div>}\n                </div> : \"\"}\n        </div>\n    )\n}\n\n/**\n * This component renders the current skills in progress before submitting it\n * @param myExpertise object that contains all skills currently in the application\n * @param removeExpertise method used to remove skills from application\n * @returns {JSX.Element} renders a list of current skills in application\n */\nconst ExpertiseView = ({myExpertise, removeExpertise}) => (\n    <div>\n        {myExpertise.map(e =>\n            <tbody>\n            <tr key={e.name + e.year}>\n                <td>{e.name}</td>\n                <td>{e.year}</td>\n            </tr>\n            <button onClick={() => removeExpertise(e.name)}>remove</button>\n            </tbody>\n        )}\n    </div>\n);\n\n\n/**\n * A form that lets user input all relevant information used to create an application\n * @param expertise all currently available skills to choose from in the application\n * @param addExpertise method used to add a skill to the application\n * @param done method used so submit the application\n * @param removeOption method that removes one available skill from the {expertise} object when that skill already has been added to the form\n * @returns {JSX.Element} render the form to input skills to the application\n */\n const AddExpertiseForm = ({expertise, addExpertise, done, removeOption}) => {\n\n    const userInfo = useSelector(state => state.UserReducer.userInfo)\n    console.log(userInfo)\n    const handleSubmit = () => {\n        let ans = window.confirm(\"Are you sure you want to submit your application?\");\n        if (ans === true) {\n            //console.log(userInfo[0].dateOfBirth);\n            //debugger;\n            done({\n                start: start,\n                end: end,\n                fname: userInfo[0].fname,\n                lname: userInfo[0].lname,\n                status: \"unhandled\",\n                dateOfBirth: userInfo[0].dateOfBirth,\n                email: userInfo[0].email\n            });\n        }\n    }\n\n    const [year, setYear] = useState(0);\n    const [type, setType] = useState('');\n    const [start, setStart] = useState(\"\");\n    const [end, setEnd] = useState(\"\");\n    return (\n        <div>\n            <input type=\"number\" min=\"0\" placeholder=\"years of experience\"\n                   onChange={(event) => setYear(event.target.value)}/>\n            <select onChange={(event) => setType(event.target.value)}>\n                <option>choose your expertise</option>\n                {expertise.map((k) => <option key={k}>{k}</option>)}\n            </select>\n            <button onClick={() => {\n                addExpertise(type, year);\n                removeOption(type)\n            }}>add skill to application\n            </button>\n\n            <div>\n                <br/>\n                <input type=\"text\" min=\"0\" placeholder=\"available start period\" onChange={(event) => {\n                    setStart(event.target.value)\n                }}/>\n                <input type=\"text\" min=\"0\" placeholder=\"available end period\" onChange={(event) => {\n                    setEnd(event.target.value)\n                }}/>\n                <button onClick={() => {\n                    handleSubmit();\n                }}>confirm and send application\n                </button>\n            </div>\n\n\n        </div>\n    );\n};\n\nexport {Expertise}; \n","/**\n * Redux action for signup\n * @param user object containing user information\n * @returns {function(*, *): void} a dispatch call to {UserReducer}\n */\nexport const signIn = (user) => {\n    return (dispatch, getState) => {\n        dispatch({type:\"LOG_IN_USER\", role:user.data.role, fname:user.data.firstName, lname: user.data.lastName, dateOfBirth: user.data.dateOfBirth, email: user.data.email})\n    }\n}\n\n/**\n * Redux action that sing out a user\n * @returns {function(*, *): void} a dispatch call to {UserReducer}\n */\nexport const signOut = () => {\n    return (dispatch, getState) => {\n        dispatch({type:\"LOG_OUT_USER\"})\n    }\n}","import React, {useEffect, useState} from 'react'\nimport {Form, Formik, useField} from \"formik\";\nimport {TextField, Button, Select, MenuItem} from \"@material-ui/core\";\nimport * as Yup from \"yup\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {signIn} from \"../Model/Redux/Actions/AuthActions\";\nimport \"./css/login-signup.css\";\nimport Loader from \"react-loader-spinner\";\nimport { useHistory } from 'react-router-dom';\n\n//TODO remove the <Pre-tags> when done testing\n\n/**\n * This is the authentication page that handles login and signup including validation.\n * @param apiCall a model document containingn axios calls to the express rest API\n * @returns {JSX.Element} renders login and signup form\n */\nconst Authentication = ({apiCall}) => {\n\n    //constants from useState and redux\n    const [authStatus, setAuthStatus] = useState(\"Sign up\");\n    const [changeAuthStatus, setChangeAuthStatus] = useState(\"Login\");\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\n    const dispatch = useDispatch();\n    //loader??\n    const [isLoading, setLoading] = useState(false);\n    const history = useHistory();\n\n\n    //life cycle methods\n    useEffect(() => {\n        if (role === \"client\") {\n            window.location = \"/user/application\";\n\n        } else if (role === \"admin\") {\n            window.location = \"/admin/applications\";\n\n        }\n    }, [isLoggedIn])\n\n\n\n    //custom formik components\n    const AuthTextField = ({\n                               placeholder,\n                               ...props\n                           }) => {\n        const [field, meta] = useField(props);\n        const errorText = meta.error && meta.touched ? meta.error : \"\";\n        return (\n            <TextField\n                placeholder={placeholder}\n                {...field}\n                helperText={errorText}\n                error={!!errorText}//casting string to boolean\n                type={props.type}\n            />\n        )\n    }\n    //yup schema for validation\n    const AuthSchema = Yup.object().shape({\n        email: Yup.string()\n            .min(4, 'Too Short!')\n            .required('Required')\n            .email('Invalid email'),\n        password: Yup.string()\n            .min(4, 'Too Short!')\n            .required('Required'),\n        firstName: (authStatus === \"Login\")\n            ? Yup.string()\n            : Yup.string()\n                .required('Required'),\n        lastName: (authStatus === \"Login\")\n            ? Yup.string()\n            : Yup.string()\n                .required('Required'),\n        dateOfBirth: Yup.array()\n            .of(\n                Yup.object().shape({\n                    year: (authStatus === \"Login\")\n                        ? Yup.number()\n                        : Yup.number().required('Required'),\n                    month: (authStatus === \"Login\")\n                        ? Yup.number()\n                        : (Yup.number()\n                            .min(1, \"must be between 1 and 12\")\n                            .max(12, \"must be between 1 and 31\")\n                            .required('Required')),\n                    day: (authStatus === \"Login\")\n                        ? Yup.number()\n                        : Yup.number()\n                            .min(1, \"must be between 1 and 31\")\n                            .max(31, \"must be between 1 and 31\")\n                            .required('Required'),\n                })\n            )\n    })\n\n    //event handlers\n    const handleAuthStatusChange = () => {\n        if (authStatus === \"Login\") {\n            setAuthStatus(\"Sign up\")\n            setChangeAuthStatus(\"Login\")\n        } else {\n            setAuthStatus(\"Login\")\n            setChangeAuthStatus(\"Sign up\")\n        }\n    }\n\n    return (\n        <div className=\"outer-wrapper\">\n            {isLoading? <Loader visible={isLoading} type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80}/>:\n            <div>\n                {!isLoggedIn\n                    ? <div className=\"inner-wrapper\" >\n                        <Formik\n                            initialValues={{\n                                username: \"\",\n                                email: \"\",\n                                password: \"\",\n                                firstName: \"\",\n                                lastName: \"\",\n                                dateOfBirth: [{year: \"\", month: \"\", day: \"\"}]\n                            }}\n                            onSubmit={(data, {setSubmitting, resetForm}) => {\n                                setSubmitting(true);\n                                resetForm();\n                                setLoading(isLoading => !isLoading);\n\n                                if (authStatus === \"Sign up\") {\n                                    const instance = apiCall.apiAxios();\n\n                                    instance.post('auth/register', {data})\n                                        .then((response) => {\n\n                                            const instance = apiCall.apiAxios();\n                                            instance.post('auth/login', {email: data.email, password: data.password})\n                                                .then((response1) => {\n                                                    dispatch(signIn(response1))\n                                                }, (error) => {\n                                                    setLoading(isLoading => !isLoading);\n                                                    //Validation error\n                                                    if(error.response.status == 400) alert(\"Wrong email and/or password\");\n                                                    //All other errors\n                                                    else{\n                                                        history.replace(history.location.pathname, { \n                                                            errorStatusCode: error.response.status\n                                                        });\n                                                    }\n                                                });\n\n                                        }, (err) => {\n                                            setLoading(isLoading => !isLoading);\n                                            //Validation error\n                                            if(err.response.status == 400) alert(\"email already in use\");\n                                            //All other errors\n                                            else{\n                                                history.replace(history.location.pathname, { \n                                                    errorStatusCode: err.response.status\n                                                });\n                                            }\n                                        });\n                                } else {\n                                    const instance = apiCall.apiAxios();\n                                    instance.post('auth/login', {email: data.email, password: data.password})\n                                        .then((response1) => {\n                                            setLoading(isLoading => !isLoading);\n                                            dispatch(signIn(response1))\n\n                                        }, (error) => {\n                                            setLoading(isLoading => !isLoading);\n                                            //Validation error\n                                            if(error.response.status == 400) alert(\"Wrong email and/or password\");\n                                            //All other errors\n                                            else{\n                                                history.replace(history.location.pathname, { \n                                                    errorStatusCode: error.response.status\n                                                });\n                                            }\n                                        });\n                                }\n                                setSubmitting(false);\n                            }}\n                            validationSchema={AuthSchema}\n                        >\n                            {({values, isSubmitting, resetForm, errors}) => (\n                                \n                        \n                                <Form >\n                                    {(authStatus === \"Sign up\") ? <div>\n                                    <p>Create an account</p>\n                                    </div> : <div>Log in</div>}\n                                    <div>\n                                        <AuthTextField\n                                            placeholder=\"Email\"\n                                            name=\"email\"\n                                            type=\"input\"\n                                        />\n                                    </div>\n                                    <div>\n                                        <AuthTextField\n                                            placeholder=\"Password\"\n                                            name=\"password\"\n                                            type=\"password\"\n                                        />\n                                    </div>\n                                    {(authStatus === \"Sign up\") ? <div>\n                                        <AuthTextField\n                                            placeholder=\"Username\"\n                                            name=\"username\"\n                                            type=\"input\"\n                                        />\n                                    </div> : \"\"}\n                                    {(authStatus === \"Sign up\") ? <div>\n                                        <AuthTextField\n                                            placeholder=\"First Name\"\n                                            name=\"firstName\"\n                                            type=\"input\"\n                                        />\n                                    </div> : \"\"}\n                                    {(authStatus === \"Sign up\") ? <div>\n                                        <AuthTextField\n                                            placeholder=\"Last Name\"\n                                            name=\"lastName\"\n                                            type=\"input\"\n                                        />\n                                    </div> : \"\"}<br/>\n                                    {(authStatus === \"Sign up\") ? <div>\n                                        <AuthTextField\n                                            placeholder=\"Year\"\n                                            name=\"dateOfBirth[0].year\"\n                                            type=\"number\"\n                                        /><br/>\n                                        <AuthTextField\n                                            placeholder=\"Month\"\n                                            name=\"dateOfBirth[0].month\"\n                                            type=\"number\"\n                                        /><br/>\n                                        <AuthTextField\n                                            placeholder=\"Day\"\n                                            name=\"dateOfBirth[0].day\"\n                                            type=\"number\"\n                                        />\n                                    </div> : \"\"}\n                                    <div>\n                                        <Button disabled={isSubmitting} type=\"submit\">{authStatus}</Button>\n                                    </div>\n                                    \n\n                                    <pre>{JSON.stringify(values, null, 2)}</pre>\n                                    <pre>{JSON.stringify(errors, null, 2)}</pre>\n\n\n                                    <div onClick={() => {\n                                        handleAuthStatusChange();\n                                        resetForm()\n                                    }}>{changeAuthStatus}</div>\n                                </Form>\n                            )}\n                        </Formik>\n\n\n                    </div>\n                    : \"\"}\n            </div>}\n        </div>\n    )\n}\nexport default Authentication;","import React from 'react'\nimport {Field, Form, Formik} from \"formik\";\nimport { TextField, Button } from \"@material-ui/core\";\n\n//TODO not used remove this later\nconst SignUpAdmin = () =>{\n\n    //event handlers\n    const changeView = (url) => {\n        window.location =  url\n    }\n    return (\n        <div className=\"wrapper\">\n            <Formik\n                initialValues={{ email: \"\", password: \"\", adminKey: \"\"}}\n                onSubmit={( data, { setSubmitting , resetForm}) =>{\n                    setSubmitting(true);\n                    resetForm();\n                    //make async calls here to auth\n                    console.log(\"submit:\", data);\n                    setSubmitting(false);\n                } }\n            >\n                {({  values, isSubmitting  })  => (\n                    <div >\n                    <Form >\n                        <div >\n                        <Field\n                            placeholder=\"Email\"\n                            name=\"email\"\n                            type=\"input\"\n                            as={TextField}\n                        />\n                        </div>\n                        <div>\n                            <Field\n                                placeholder=\"Password\"\n                                name=\"password\"\n                                type=\"password\"\n                                as={TextField}\n                            />\n                        </div>\n                        <div>\n                            <Field\n                                placeholder=\"Key\"\n                                name=\"adminKey\"\n                                type=\"password\"\n                                as={TextField}\n                            />\n                        </div>\n                        <div>\n                            <Button disabled={isSubmitting} type=\"submit\">Sign up</Button>\n                        </div>\n                        <pre>{JSON.stringify(values, null, 2)}</pre>\n\n                    </Form>\n                    </div>\n                )}\n\n\n            </Formik>\n            <div onClick={()=>{changeView(\"/\")}}>log in</div>\n\n        </div>\n    )\n}\n\nexport default SignUpAdmin;","import React from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n/**\n * This component renders one row in the admin applications list. Each row shows all relevant information about said application\n * @param apiCall a model document containing axios api calls to the express app\n * @param item all info about one application ie one row in the list\n * @returns {JSX.Element} renders one row in the admin applications list\n * @constructor\n */\nconst ApplicationElement = ({apiCall, item}) => {\n    const history = useHistory();\n    const updateStatus = (event) => {\n        const instance = apiCall.apiAxios();\n        instance.post('posts/application', {status: event.target.value, email: item.email})\n            .then((response) => {\n                console.log(response)\n\n            }, (err) => {\n                //Validation error\n                if(err.response.status == 400) console.log(\"Email is incorrect\");\n                //All other errors\n                else{\n                    history.replace(history.location.pathname, { \n                        errorStatusCode: err.response.status\n                    });\n                }\n            });\n    }\n\n\n    return (\n        <tr key={item.id}>\n            <td>{item.firstName}</td>\n            <td>{item.lastName}</td>\n            <td>{item.competence?.map(comp =>{\n                return(\n                    <div>{comp.name} {comp.year} year(s)</div>\n                )\n            })}</td>\n            <td>{item.startPeriod}</td>\n            <td>{item.endPeriod}</td>\n            <td>{item.dateOfBirth?.map(comp =>{\n                return(\n                    <div>{comp.year}-{comp.month}-{comp.day} </div>\n                )\n            })}</td>\n            <td>{item.date}</td>\n            <td><select name=\"status\" onChange={(event)=>{ updateStatus(event) }}>\n\n                {(item.status === \"unhandled\")?\n                    <option selected=\"selected\" value=\"unhandled\">unhandled</option>\n                :<option value=\"unhandled\">unhandled</option>}\n\n                {(item.status === \"rejected\")?\n                    <option selected=\"selected\" value=\"rejected\">rejected</option>\n                    :<option value=\"rejected\">rejected</option>}\n\n                {(item.status === \"accepted\")?\n                    <option selected=\"selected\" value=\"accepted\">accepted</option>\n                    :<option value=\"accepted\">accepted</option>}\n            </select></td>\n        </tr>\n    )\n\n}\n\nexport default ApplicationElement;","import React from \"react\"\nimport ApplicationElement from \"./ApplicationElement\";\nimport \"./css/ApplicationList.css\"\n\n/**\n * The admin application list header.\n * @param applications an object containing all applications that the page should render in a list\n * @returns {JSX.Element} renders a list header and calls the <ApplicationElement/> component to render all rows\n */\nconst ApplicationList = ({apiCall, applications} ) => {\n\n    return(\n        <table className=\"content-table\">\n            <thead>\n            <tr>\n                <th>fname</th>\n                <th>lname</th>\n                <th>skills</th>\n                <th>startP</th>\n                <th>endP</th>\n                <th>date of birth</th>\n                <th>application made at</th>\n                <th>application status</th>\n            </tr>\n            </thead>\n            <tbody>\n            {applications?.map(item =>{\n                return(\n                    <ApplicationElement apiCall={apiCall} item={item}/>\n                )\n            })}\n            </tbody>\n        </table>\n    )\n}\n\nexport default ApplicationList;","import React, {useEffect, useState} from \"react\"\nimport { Form, Formik, useField } from \"formik\";\nimport {Button, Checkbox, FormControlLabel} from \"@material-ui/core\";\nimport ApplicationList from \"./ApplicationList\";\nimport {useSelector} from \"react-redux\";\nimport Loader from \"react-loader-spinner\";\nimport { useHistory } from 'react-router-dom';\n\n/**\n * Handles the admin page.\n * A logged in admin may go through all applications and sort by skills\n * The admin can also give a status to an application (accepted, unhandled, rejected)\n * @param apiCall model that handles axios api calls to the backend REST API\n * @returns {JSX.Element} renders the Admin page showing applications\n */\nconst AdminApplications = ({apiCall}) => {\n    //constants from useState and redux\n    const [result, setResult] = useState([])\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\n    const history = useHistory();\n    const [isLoading, setLoading] = useState(false);\n\n\n    //life cycle methods\n    useEffect(() => {\n        if ((role !== \"admin\") || (isLoggedIn === false))\n            window.location = \"/\"\n    }, [isLoggedIn, role])\n\n\n    //custom formik components\n    const CustomCheckboxes = ({label, ...props}) => {\n        const [field] = useField(props);\n        return <FormControlLabel {...field} control={<Checkbox/>} label={label}/>;\n    }\n\n\n    return (\n    <div>\n        {isLoading? <Loader visible={isLoading} type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80}/>:\n        <div>\n            {(role === \"admin\") && (isLoggedIn === true)\n                ? <div>\n                    <Formik\n                        initialValues={{\n\n                            competences: []\n\n                        }}\n                        onSubmit={(data, {setSubmitting}) => {\n                            setSubmitting(true);\n                            let param = \"posts\"\n                             if (data.competences.length === 1) {\n                                param = \"posts/competence=\" + data.competences[0];\n                            }\n                            else if (data.competences.length === 2) {\n                                param = \"posts/competence=\" + data.competences[0] + \"&=\" + data.competences[1];\n                              \n                            } \n                            else if (data.competences.length === 3) {\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2];\n                            }\n                            else if (data.competences.length === 4) {\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2]+ \"&=\" + data.competences[3];\n                            }\n                            else if (data.competences.length === 5) {\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2]+ \"&=\" + data.competences[3]+ \"&=\" + data.competences[4];\n                            }\n                              console.log(param)\n\n                            const instance = apiCall.apiAxios();\n                            instance.get(param).then(r =>( setSubmitting(false), setResult(r.data),setResult(r.data)))\n                            .catch(err => {\n                                setLoading(isLoading => !isLoading);\n                                //Validation error\n                                if(err.response.status == 400) console.log(err);\n                                //All other errors\n                                else{\n                                    history.replace(history.location.pathname, { \n                                        errorStatusCode: err.response.status\n                                    });\n                                }\n                            })\n                        }}\n                    >\n                        {({values, isSubmitting, errors}) => (\n                            <Form>\n                                <CustomCheckboxes name=\"competences\" value=\"A-skills\" type=\"checkbox\" label=\"A-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"B-skills\" type=\"checkbox\" label=\"B-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"C-skills\" type=\"checkbox\" label=\"C-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"D-skills\" type=\"checkbox\" label=\"D-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"E-skills\" type=\"checkbox\" label=\"E-skills\"/>\n                                <Button disabled={isSubmitting} type=\"submit\">Get Applications</Button>\n                                <div>\n                                    <pre>{JSON.stringify(values, null, 2)}</pre>\n                                    <pre>{JSON.stringify(errors, null, 2)}</pre>\n                                </div>\n                            </Form>\n\n                        )}\n                    </Formik>\n                    {(result.length > 0) ? <ApplicationList apiCall={apiCall} applications={result}/> : \"\"}\n                </div>\n                : \"\"}\n        </div>}</div>\n    )\n}\n\nexport default AdminApplications;","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {signOut} from \"../Model/Redux/Actions/AuthActions\";\nimport \"./css/Header.css\";\n\n/**\n * Header component. Renders logo and logout button\n * @returns {JSX.Element} returns header, logo and logout button\n */\nconst Header = () => {\n    //constants from redux\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"Header-wrapper\">\n            <div className=\"logo\">Recruitment Logo Here</div>\n            {isLoggedIn\n                ? <button className=\"authButton\" onClick={ ()=> dispatch(signOut())  }>Log out</button>\n                : \"\"}\n        </div>\n    )\n}\n\nexport default Header;","import {Component} from \"react\";\nimport './App.css';\nimport { Route } from \"react-router-dom\"\n\n//models\nimport ApiCall from './Model/apiCall';\nimport Model from './Model/model'\n\n//presenter\nimport {Expertise} from './Views/Expertise'\n//views\nimport Authentication from \"./Views/Authentication\";\nimport SignUpAdmin from \"./Views/SignUpAdmin\";\nimport AdminApplications from \"./Views/AdminApplications\";\nimport Header from \"./Views/Header\";\n\n/**\n * Main file for the frontend\n * Handles initial import of the model and routing of the frontend app\n */\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            apiCall: new ApiCall(),\n            model: new Model()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"applicationApp\">\n                <header className=\"recruitmentApp\">\n                    <Header/>\n                </header>\n                <Route\n                    exact path=\"/\"\n                    render={() => <Authentication apiCall={this.state.apiCall}/>}\n                />\n                <Route\n                    exact path=\"/admin/signup\"\n                    render={() => <SignUpAdmin/>}\n                />\n                <Route\n                    exact path=\"/user/application\"\n                    render={() => <Expertise model={this.state.model} apiCall={this.state.apiCall}/>}\n                />\n                <Route\n                    exact path=\"/admin/applications\"\n                    render={() => <AdminApplications apiCall={this.state.apiCall}/>}\n                />\n            </div>\n        );\n\n    }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState =\n    {\n        userInfo: [\n            {\n                isLoggedIn: false,\n                role: null,\n                fname: \"\",\n                lname: \"\",\n                dateOfBirth: \"\",\n                email: \"\",\n            }\n        ]\n    }\n/**\n * A reducer that handles login and signup\n * @param state the current state of this reducer\n * @param action the action that is to be performed\n * @returns {{userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}]}}\n */\nconst UserReducer = (state = initState, action) => {\n    switch (action.type) {\n        case \"LOG_IN_USER\":\n            return {\n\n                userInfo: [\n                    {\n                        isLoggedIn: true,\n                        role: action.role,\n                        fname: action.fname,\n                        lname: action.lname,\n                        dateOfBirth: action.dateOfBirth,\n                        email: action.email,\n                    }\n                ]\n\n            };\n        case \"LOG_OUT_USER\":\n            return {\n\n                userInfo: [\n                    {\n                        isLoggedIn: false,\n                        role: null,\n                        fname: \"\",\n                        lname: \"\",\n                        dateOfBirth: \"\",\n                        email: \"\",\n                    }\n                ]\n\n            };\n        default:\n            return state;\n\n    }\n}\n\nexport default UserReducer;","import { combineReducers } from \"redux\";\nimport UserReducer from \"./UserReducer\";\n\n/**\n * This component combines all reducers in this Redux store\n * @type {Reducer<CombinedState<{UserReducer: ({userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}]}|{userInfo: [{fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}]}|{userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: string}]}|{userInfo: [{fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}]})}>>}\n */\nexport const AllReducers = combineReducers({\n    UserReducer\n})","import {applyMiddleware, compose, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport { AllReducers } from \"./Reducers\"\n\n/**\n * Config Used to persist the redux store\n * @type {{storage, key: string}}\n */\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\n/**\n * A persisted combined reducer\n * @type {Reducer<CombinedState<{UserReducer: ({userInfo: {fname: (string|*), lname: (string|*), role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}[]}|{userInfo: {fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}[]}|{userInfo: {fname: (string|*), lname: (string|*), role: *, isLoggedIn: boolean, dateOfBirth: *, email: string}[]})}> & PersistPartial, unknown>}\n */\nconst persistedReducer = persistReducer(persistConfig, AllReducers)\n\n\nexport const ReduxStore = createStore(persistedReducer, applyMiddleware(thunk));\nexport const Persistor = persistStore(ReduxStore)\n","import React from 'react';\nimport { useLocation} from 'react-router-dom';\nimport { get } from 'lodash';\nimport { Link } from \"react-router-dom\";\n\nconst ErrorHandler = ({ children }) => {\n  const location = useLocation();\n\n  switch (get(location.state, 'errorStatusCode')) {\n    case 404:\n      return (\n        <div>\n          <h1>404 Error</h1>\n          <p>The requested URL was not found on this server.</p>\n          <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\n        </div>\n      );\n    case 401:\n      return (\n        <div>\n          <h1>401 Error</h1>\n          <p>Unauthorized access.</p>\n          <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\n        </div>);\n    case 500:\n      return (\n        <div>\n          <h1>500 Error</h1>\n          <p>Server encountered a internal error and cannot handle the request.</p>\n          <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\n        </div>);\n    case 501:\n      return (\n        <div>\n          <h1>501 Error</h1>\n          <p>Server encountered a error and currently cannot handle the request.</p> \n          <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\n        </div>);\n    case 503:\n      return (\n        <div>\n          <h1>503 Error</h1>\n          <p>Server encountered a error and currently cannot handle the request.</p> \n          <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\n        </div>);\n\n    default:\n      return children\n  }\n};\n\nexport default ErrorHandler;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {ReduxStore, Persistor} from \"./Model/Redux\"\nimport {BrowserRouter} from \"react-router-dom\";\nimport {PersistGate} from 'redux-persist/integration/react'\nimport ErrorHandler from './Views/ErrorHandler'\n\nReactDOM.render(\n    <Provider store={ReduxStore}>\n        <PersistGate loading={null} persistor={Persistor}>\n            <BrowserRouter>\n                <ErrorHandler>\n                    <App/>\n                </ErrorHandler>\n            </BrowserRouter>\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}