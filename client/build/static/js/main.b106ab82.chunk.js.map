{"version":3,"sources":["Model/apiCall.js","Model/model.js","Views/Expertise.js","Model/Redux/Actions/AuthActions.js","Views/Authentication.js","Views/SignUpAdmin.js","Views/ApplicationElement.js","Views/ApplicationList.js","Views/AdminApplications.js","Views/Header.js","Views/ErrorPages.js","Views/MigrateFromOldDB.js","App.js","reportWebVitals.js","Model/Redux/Reducers/UserReducer.js","Model/Redux/Reducers/index.js","Model/Redux/index.js","ErrorHandler.js","index.js"],"names":["ApiCall","axios","create","baseURL","withCredentials","credentials","headers","model","this","myExpertise","observers","name","filter","exp","notifyObserver","t","y","year","obs","concat","removeObserver","forEach","callback","o","Expertise","apiCall","isLoggedIn","useSelector","state","UserReducer","userInfo","role","email","useState","hasApplication","setHasApplication","history","useHistory","apiAxios","get","then","r","console","log","status","catch","err","response","replace","location","pathname","errorStatusCode","useEffect","window","getAllExpertise","allExpertise","setExpertice","getExpertise","setMyExpertise","addObserver","localStorage","setItem","instance","className","removeExpertise","n","expertise","addExpertise","done","info","post","startPeriod","start","endPeriod","end","dateOfBirth","month","day","firstName","fname","lastName","lname","competence","removeOption","e","removeSelectedExpertise","ExpertiseView","map","onClick","AddExpertiseForm","setYear","type","setType","setStart","setEnd","min","placeholder","onChange","event","target","value","k","disabled","confirm","signIn","user","dispatch","getState","data","Authentication","authStatus","setAuthStatus","changeAuthStatus","setChangeAuthStatus","useDispatch","isLoading","setLoading","AuthTextField","props","useField","field","meta","errorText","error","touched","TextField","helperText","AuthSchema","Yup","shape","required","password","matches","of","max","visible","color","height","width","initialValues","username","onSubmit","setSubmitting","resetForm","response1","alert","validationSchema","values","isSubmitting","errors","Button","SignUpAdmin","adminKey","as","JSON","stringify","url","ApplicationElement","item","comp","date","updateStatus","selected","id","ApplicationList","applications","AdminApplications","result","setResult","CustomCheckboxes","label","FormControlLabel","control","Checkbox","competences","param","length","Header","loginRole","Page404","to","Page401","Page500","Page501","Page503","MigrateFromOldDB","incompleteUsers","errorMsgInfo","errorMsgInfoApplications","incompleteApplications","completedUsers","completedApplications","compReason","applicationsSentToDB","allEmails","migrationHandler","sqlRow","splitByWord","SQLSTATE","includes","sqlValues","split","order","join","orderOfData","i","val","userID","firstname","lastname","compProfID","competenceID","compYear","availableID","fromDate","toDate","stat","push","dob","substring","parseInt","Object","keys","errorMessage","application","applicationInfo","competenceName","compName","undefined","parseFloat","app","savedUser","skipWriteAgain","files","reader","FileReader","onload","num","str","readAsText","handleFiles","VALUES","App","Model","exact","path","render","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","action","AllReducers","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","ReduxStore","createStore","applyMiddleware","thunk","Persistor","persistStore","ErrorHandler","children","useLocation","ReactDOM","store","loading","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.b106ab82.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/**\r\n * Model that handles all axios HTTP calls to the express API.\r\n * Contains the base URL to the express API\r\n */\r\nexport default class ApiCall {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    apiAxios() {\r\n        return axios.create({\r\n            baseURL: \"/\",\r\n            withCredentials: true,\r\n            credentials: 'include',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n}\r\n      ","/**\r\n * Model that contains all available skills and current skills stored in the frontend\r\n */\r\nexport default class model{\r\n    constructor(){\r\n        this.myExpertise = [];\r\n        this.observers = [];\r\n    }\r\n    getExpertise(){\r\n        return this.myExpertise;\r\n    }\r\n    removeExpertise(name){\r\n\t\tthis.myExpertise = [...this.myExpertise.filter((exp) => exp.name !== name)];\r\n        this.notifyObserver();\r\n    }\r\n    addExpertise(t, y){\r\n        var exp = {name: t, year: y};\r\n        this.myExpertise = [...this.myExpertise, exp];\r\n        this.notifyObserver();\r\n    }\r\n    getAllExpertise(){\r\n        const exp = [\"A-skills\", \"B-skills\", \"C-skills\", \"D-skills\", \"E-skills\"];\r\n        return exp;\r\n    }\r\n\r\n    addObserver(obs){\r\n        this.observers = this.observers.concat(obs);\r\n        return () => this.removeObserver(obs);\r\n    }\r\n    \r\n    notifyObserver(){\r\n        this.observers.forEach(function(callback) {\r\n            callback();\r\n        });    \r\n    }\r\n    removeObserver(obs) {\r\n        this.observers = this.observers.filter(o => o !== obs)\r\n    }\r\n\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport \"./css/Header.css\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n/**\r\n * Renders all views related to the client page.\r\n * @param model a model document used to get available skills and handle all skills in current application in progress before submitting\r\n * @param apiCall a model document handling all axios calls to the express API\r\n * @returns {JSX.Element} renders all views on the client page\r\n */\r\nfunction Expertise({model, apiCall}) {\r\n    //constants from redux store\r\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\r\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\r\n    const email = useSelector(state => state.UserReducer.userInfo[0].email);\r\n    const [hasApplication, setHasApplication] = useState(false);\r\n    const history = useHistory();\r\n\r\n    //event handler checking if user already has made an application\r\n    const instance2 = apiCall.apiAxios();\r\n \r\n    instance2.get(\"posts/postEmail=\"+email).then(r => (\r\n        console.log(r.status),\r\n            console.log(r),\r\n            setHasApplication(true)\r\n    )).catch(err => {\r\n        setHasApplication(false)\r\n        //Validation error\r\n        if(err.response.status == 400) console.log(err)\r\n        //All other errors\r\n        else{\r\n            history.replace(history.location.pathname, { \r\n                errorStatusCode: err.response.status\r\n            });\r\n        }\r\n    })\r\n\r\n\r\n    //lifecycle methods\r\n    useEffect(() => {\r\n        if ((role !== \"client\") || (isLoggedIn === false))\r\n            window.location = \"/\"\r\n    }, [isLoggedIn, role])\r\n    useEffect(() => {\r\n        if ((role !== \"client\") || (isLoggedIn === false))\r\n            window.location = \"/\"\r\n    }, [])\r\n\r\n    const [allExpertise, setExpertice] = useState(model.getAllExpertise());\r\n    useEffect(() => setExpertice(model.getAllExpertise()), []);\r\n\r\n    const [myExpertise, setMyExpertise] = useState(model.getExpertise());\r\n    useEffect(function () {\r\n        return model.addObserver(function () {\r\n            setMyExpertise(model.getExpertise());\r\n        })\r\n    }, [model]);\r\n\r\n    //Ta bort: Modellen bestämmer om den vill läsa från localstorage eller inte.......\r\n    useEffect(() => localStorage.setItem('formData', myExpertise));\r\n\r\n    // eventhandlers\r\n    //remove selected state when chosen?\r\n    const removeSelectedExpertise = e => {\r\n        const exp = allExpertise.filter(name => name !== e);\r\n        setExpertice(exp);\r\n    }\r\n    const instance = apiCall.apiAxios();\r\n\r\n    return (\r\n        <div className=\"outer-wrapper\">\r\n            {((role === \"client\") && (isLoggedIn === true)) ?\r\n                <div>\r\n                    {!hasApplication ?\r\n                        <div>\r\n                            <ExpertiseView myExpertise={myExpertise} removeExpertise={n => {\r\n                                model.removeExpertise(n);\r\n                                setExpertice([...allExpertise, n])\r\n                            }}/>\r\n                            <AddExpertiseForm expertise={allExpertise}\r\n                                              addExpertise={(t, y) => model.addExpertise(t, y)}\r\n                                              done={(info) => instance.post('posts', {\r\n                                                  startPeriod: info.start,\r\n                                                  endPeriod: info.end,\r\n                                                  dateOfBirth: [{\r\n                                                      year: info.dateOfBirth.year,\r\n                                                      month: info.dateOfBirth.month,\r\n                                                      day: info.dateOfBirth.day\r\n                                                  }],\r\n                                                  status: \"unhandled\",\r\n                                                  firstName: info.fname,\r\n                                                  lastName: info.lname,\r\n                                                  competence: myExpertise,\r\n                                                  email: info.email,\r\n                                              }).catch(err => {\r\n                                                  //Validation error\r\n                                                if(err.response.status == 400) console.log(err)\r\n                                                //All other errors\r\n                                                else{\r\n                                                    history.replace(history.location.pathname, { \r\n                                                        errorStatusCode: err.response.status\r\n                                                    });\r\n                                                }\r\n                                              })}\r\n                                              removeOption={(name) => removeSelectedExpertise(name)}\r\n                            /></div>\r\n                        : <div>You have already made an application. Please wait for us to give you a response</div>}\r\n                </div> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * This component renders the current skills in progress before submitting it\r\n * @param myExpertise object that contains all skills currently in the application\r\n * @param removeExpertise method used to remove skills from application\r\n * @returns {JSX.Element} renders a list of current skills in application\r\n */\r\nconst ExpertiseView = ({myExpertise, removeExpertise}) => (\r\n    <div>\r\n        {myExpertise.map(e =>\r\n            <tbody>\r\n            <tr key={e.name + e.year}>\r\n                <td>{e.name}</td>\r\n                <td>{e.year}</td>\r\n            </tr>\r\n            <button onClick={() => removeExpertise(e.name)}>remove</button>\r\n            </tbody>\r\n        )}\r\n    </div>\r\n);\r\n\r\n\r\n/**\r\n * A form that lets user input all relevant information used to create an application\r\n * @param expertise all currently available skills to choose from in the application\r\n * @param addExpertise method used to add a skill to the application\r\n * @param done method used so submit the application\r\n * @param removeOption method that removes one available skill from the {expertise} object when that skill already has been added to the form\r\n * @returns {JSX.Element} render the form to input skills to the application\r\n */\r\n const AddExpertiseForm = ({expertise, addExpertise, done, removeOption}) => {\r\n\r\n    const userInfo = useSelector(state => state.UserReducer.userInfo)\r\n    console.log(userInfo)\r\n    const handleSubmit = () => {\r\n        let ans = window.confirm(\"Are you sure you want to submit your application?\");\r\n        if (ans === true) {\r\n            //console.log(userInfo[0].dateOfBirth);\r\n            //debugger;\r\n            done({\r\n                start: start,\r\n                end: end,\r\n                fname: userInfo[0].fname,\r\n                lname: userInfo[0].lname,\r\n                status: \"unhandled\",\r\n                dateOfBirth: userInfo[0].dateOfBirth,\r\n                email: userInfo[0].email\r\n            });\r\n        }\r\n    }\r\n\r\n    const [year, setYear] = useState(0);\r\n    const [type, setType] = useState('');\r\n    const [start, setStart] = useState(\"\");\r\n    const [end, setEnd] = useState(\"\");\r\n    return (\r\n        <div>\r\n            <input type=\"number\" min=\"0\" placeholder=\"years of experience\"\r\n                   onChange={(event) => setYear(event.target.value)}/>\r\n            <select onChange={(event) => setType(event.target.value)}>\r\n                <option>choose your expertise</option>\r\n                {expertise.map((k) => <option key={k}>{k}</option>)}\r\n            </select>\r\n            <button disabled={type === ''} onClick={() => {\r\n                addExpertise(type, year);\r\n                removeOption(type);\r\n                setType('');\r\n            }}>add skill to application\r\n            </button>\r\n\r\n            <div>\r\n                <br/>\r\n                <input type=\"text\" min=\"0\" placeholder=\"available start period\" onChange={(event) => {\r\n                    setStart(event.target.value)\r\n                }}/>\r\n                <input type=\"text\" min=\"0\" placeholder=\"available end period\" onChange={(event) => {\r\n                    setEnd(event.target.value)\r\n                }}/>\r\n                <button onClick={() => {\r\n                    handleSubmit();\r\n                }}>confirm and send application\r\n                </button>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport {Expertise}; \r\n","/**\r\n * Redux action for signup\r\n * @param user object containing user information\r\n * @returns {function(*, *): void} a dispatch call to {UserReducer}\r\n */\r\nexport const signIn = (user) => {\r\n    return (dispatch, getState) => {\r\n        dispatch({type:\"LOG_IN_USER\", role:user.data.role, fname:user.data.firstName, lname: user.data.lastName, dateOfBirth: user.data.dateOfBirth, email: user.data.email})\r\n    }\r\n}\r\n\r\n/**\r\n * Redux action that sing out a user\r\n * @returns {function(*, *): void} a dispatch call to {UserReducer}\r\n */\r\nexport const signOut = () => {\r\n    return (dispatch, getState) => {\r\n        dispatch({type:\"LOG_OUT_USER\"})\r\n    }\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {Form, Formik, useField} from \"formik\";\r\nimport {TextField, Button, Select, MenuItem} from \"@material-ui/core\";\r\nimport * as Yup from \"yup\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signIn} from \"../Model/Redux/Actions/AuthActions\";\r\nimport \"./css/login-signup.css\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\n//TODO remove the <Pre-tags> when done testing\r\n\r\n/**\r\n * This is the authentication page that handles login and signup including validation.\r\n * @param apiCall a model document containingn axios calls to the express rest API\r\n * @returns {JSX.Element} renders login and signup form\r\n */\r\nconst Authentication = ({apiCall}) => {\r\n\r\n    //constants from useState and redux\r\n    const [authStatus, setAuthStatus] = useState(\"Sign up\");\r\n    const [changeAuthStatus, setChangeAuthStatus] = useState(\"Login\");\r\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\r\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\r\n    const dispatch = useDispatch();\r\n    const [isLoading, setLoading] = useState(false);\r\n    const history = useHistory();\r\n\r\n\r\n    //life cycle methods\r\n    useEffect(() => {\r\n        if (role === \"client\") {\r\n            window.location = \"/user/application\";\r\n\r\n        } else if (role === \"admin\") {\r\n            window.location = \"/admin/applications\";\r\n\r\n        }\r\n    }, [isLoggedIn])\r\n\r\n\r\n\r\n    //custom formik components\r\n    const AuthTextField = ({\r\n                               placeholder,\r\n                               ...props\r\n                           }) => {\r\n        const [field, meta] = useField(props);\r\n        const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n        return (\r\n            <TextField\r\n                placeholder={placeholder}\r\n                {...field}\r\n                helperText={errorText}\r\n                error={!!errorText}//casting string to boolean\r\n                type={props.type}\r\n            />\r\n        )\r\n    }\r\n    //yup schema for validation\r\n    const AuthSchema = Yup.object().shape({\r\n        email: Yup.string()\r\n            .min(4, 'Too Short!')\r\n            .required('Required')\r\n            .email('Invalid email'),\r\n        password: Yup.string()\r\n            .min(4, 'Too Short!')\r\n            .required('Required'),\r\n        firstName: (authStatus === \"Login\")\r\n            ? Yup.string()\r\n            : Yup.string()\r\n                .required('Required')\r\n                .matches(/^(?=.)[a-ö]*$/, \"must not contain numbers\"),\r\n        lastName: (authStatus === \"Login\")\r\n            ? Yup.string()\r\n            : Yup.string()\r\n                .required('Required')\r\n                .matches(/^(?=.)[a-ö]*$/, \"must not not contain numbers\"),\r\n        dateOfBirth: Yup.array()\r\n            .of(\r\n                Yup.object().shape({\r\n                    year: (authStatus === \"Login\")\r\n                        ? Yup.number()\r\n                        : Yup.number().required('Required'),\r\n                    month: (authStatus === \"Login\")\r\n                        ? Yup.number()\r\n                        : (Yup.number()\r\n                            .min(1, \"must be between 1 and 12\")\r\n                            .max(12, \"must be between 1 and 31\")\r\n                            .required('Required')),\r\n                    day: (authStatus === \"Login\")\r\n                        ? Yup.number()\r\n                        : Yup.number()\r\n                            .min(1, \"must be between 1 and 31\")\r\n                            .max(31, \"must be between 1 and 31\")\r\n                            .required('Required'),\r\n                })\r\n            )\r\n    })\r\n\r\n    //event handlers\r\n    const handleAuthStatusChange = () => {\r\n        if (authStatus === \"Login\") {\r\n            setAuthStatus(\"Sign up\")\r\n            setChangeAuthStatus(\"Login\")\r\n        } else {\r\n            setAuthStatus(\"Login\")\r\n            setChangeAuthStatus(\"Sign up\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"outer-wrapper\">\r\n            {isLoading? <Loader visible={isLoading} type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80}/>:\r\n            <div>\r\n                {!isLoggedIn\r\n                    ? <div className=\"inner-wrapper\" >\r\n                        <Formik\r\n                            initialValues={{\r\n                                username: \"\",\r\n                                email: \"\",\r\n                                password: \"\",\r\n                                firstName: \"\",\r\n                                lastName: \"\",\r\n                                dateOfBirth: [{year: \"\", month: \"\", day: \"\"}]\r\n                            }}\r\n                            onSubmit={(data, {setSubmitting, resetForm}) => {\r\n                                setSubmitting(true);\r\n                                resetForm();\r\n                                setLoading(isLoading => !isLoading);\r\n\r\n                                if (authStatus === \"Sign up\") {\r\n                                    const instance = apiCall.apiAxios();\r\n\r\n                                    instance.post('auth/register', {data})\r\n                                        .then((response) => {\r\n\r\n                                            const instance = apiCall.apiAxios();\r\n                                            instance.post('auth/login', {email: data.email, password: data.password})\r\n                                                .then((response1) => {\r\n                                                    dispatch(signIn(response1))\r\n                                                }, (error) => {\r\n                                                    setLoading(isLoading => !isLoading);\r\n                                                    //Validation error\r\n                                                    if(error.response.status == 400) alert(\"Wrong email and/or password\");\r\n                                                    //All other errors\r\n                                                    else{\r\n                                                        history.replace(history.location.pathname, { \r\n                                                            errorStatusCode: error.response.status\r\n                                                        });\r\n                                                    }\r\n                                                });\r\n\r\n                                        }, (err) => {\r\n                                            setLoading(isLoading => !isLoading);\r\n                                            //Validation error\r\n                                            if(err.response.status == 400) alert(\"email already in use\");\r\n                                            //All other errors\r\n                                            else{\r\n                                                history.replace(history.location.pathname, { \r\n                                                    errorStatusCode: err.response.status\r\n                                                });\r\n                                            }\r\n                                        });\r\n                                } else {\r\n                                    const instance = apiCall.apiAxios();\r\n                                    instance.post('auth/login', {email: data.email, password: data.password})\r\n                                        .then((response1) => {\r\n                                            setLoading(isLoading => !isLoading);\r\n                                            dispatch(signIn(response1))\r\n\r\n                                        }, (error) => {\r\n                                            setLoading(isLoading => !isLoading);\r\n                                            //Validation error\r\n                                            if(error.response.status == 400) alert(\"Wrong email and/or password\");\r\n                                            //All other errors\r\n                                            else{\r\n                                                history.replace(history.location.pathname, { \r\n                                                    errorStatusCode: error.response.status\r\n                                                });\r\n                                            }\r\n                                        });\r\n                                }\r\n                                setSubmitting(false);\r\n                            }}\r\n                            validationSchema={AuthSchema}\r\n                        >\r\n                            {({values, isSubmitting, resetForm, errors}) => (\r\n                                \r\n                        \r\n                                <Form >\r\n                                    {(authStatus === \"Sign up\") ? <div>\r\n                                    <p>Create an account</p>\r\n                                    </div> : <div>Log in</div>}\r\n                                    <div>\r\n                                        <AuthTextField\r\n                                            placeholder=\"Email\"\r\n                                            name=\"email\"\r\n                                            type=\"input\"\r\n                                        />\r\n                                    </div>\r\n                                    <div>\r\n                                        <AuthTextField\r\n                                            placeholder=\"Password\"\r\n                                            name=\"password\"\r\n                                            type=\"password\"\r\n                                        />\r\n                                    </div>\r\n                                    {(authStatus === \"Sign up\") ? <div>\r\n                                        <AuthTextField\r\n                                            placeholder=\"Username\"\r\n                                            name=\"username\"\r\n                                            type=\"input\"\r\n                                        />\r\n                                    </div> : \"\"}\r\n                                    {(authStatus === \"Sign up\") ? <div>\r\n                                        <AuthTextField\r\n                                            placeholder=\"First Name\"\r\n                                            name=\"firstName\"\r\n                                            type=\"input\"\r\n                                        />\r\n                                    </div> : \"\"}\r\n                                    {(authStatus === \"Sign up\") ? <div>\r\n                                        <AuthTextField\r\n                                            placeholder=\"Last Name\"\r\n                                            name=\"lastName\"\r\n                                            type=\"input\"\r\n                                        />\r\n                                    </div> : \"\"}<br/>\r\n                                    {(authStatus === \"Sign up\") ? <div>\r\n                                        <AuthTextField\r\n                                            placeholder=\"Year\"\r\n                                            name=\"dateOfBirth[0].year\"\r\n                                            type=\"number\"\r\n                                        /><br/>\r\n                                        <AuthTextField\r\n                                            placeholder=\"Month\"\r\n                                            name=\"dateOfBirth[0].month\"\r\n                                            type=\"number\"\r\n                                        /><br/>\r\n                                        <AuthTextField\r\n                                            placeholder=\"Day\"\r\n                                            name=\"dateOfBirth[0].day\"\r\n                                            type=\"number\"\r\n                                        />\r\n                                    </div> : \"\"}\r\n                                    <div>\r\n                                        <Button disabled={isSubmitting} type=\"submit\">{authStatus}</Button>\r\n                                    </div>\r\n                                    \r\n\r\n\r\n\r\n\r\n                                    <div onClick={() => {\r\n                                        handleAuthStatusChange();\r\n                                        resetForm()\r\n                                    }}>{changeAuthStatus}</div>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n\r\n\r\n                    </div>\r\n                    : \"\"}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n/** DELETE IF NO USE, USED FOR TESTING FORM INPUTS\r\n *  <pre>{JSON.stringify(errors, null, 2)}</pre>\r\n *  <pre>{JSON.stringify(values, null, 2)}</pre>\r\n */\r\nexport default Authentication;","import React from 'react'\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\n\r\n//TODO not used remove this later\r\nconst SignUpAdmin = () =>{\r\n\r\n    //event handlers\r\n    const changeView = (url) => {\r\n        window.location =  url\r\n    }\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Formik\r\n                initialValues={{ email: \"\", password: \"\", adminKey: \"\"}}\r\n                onSubmit={( data, { setSubmitting , resetForm}) =>{\r\n                    setSubmitting(true);\r\n                    resetForm();\r\n                    //make async calls here to auth\r\n                    console.log(\"submit:\", data);\r\n                    setSubmitting(false);\r\n                } }\r\n            >\r\n                {({  values, isSubmitting  })  => (\r\n                    <div >\r\n                    <Form >\r\n                        <div >\r\n                        <Field\r\n                            placeholder=\"Email\"\r\n                            name=\"email\"\r\n                            type=\"input\"\r\n                            as={TextField}\r\n                        />\r\n                        </div>\r\n                        <div>\r\n                            <Field\r\n                                placeholder=\"Password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                as={TextField}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <Field\r\n                                placeholder=\"Key\"\r\n                                name=\"adminKey\"\r\n                                type=\"password\"\r\n                                as={TextField}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <Button disabled={isSubmitting} type=\"submit\">Sign up</Button>\r\n                        </div>\r\n                        <pre>{JSON.stringify(values, null, 2)}</pre>\r\n\r\n                    </Form>\r\n                    </div>\r\n                )}\r\n\r\n\r\n            </Formik>\r\n            <div onClick={()=>{changeView(\"/\")}}>log in</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpAdmin;","import React from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n/**\r\n * This component renders one row in the admin applications list. Each row shows all relevant information about said application\r\n * @param apiCall a model document containing axios api calls to the express app\r\n * @param item all info about one application ie one row in the list\r\n * @returns {JSX.Element} renders one row in the admin applications list\r\n * @constructor\r\n */\r\nconst ApplicationElement = ({apiCall, item}) => {\r\n    const history = useHistory();\r\n    const updateStatus = (event) => {\r\n        const instance = apiCall.apiAxios();\r\n        instance.post('posts/application', {status: event.target.value, email: item.email})\r\n            .then((response) => {\r\n                console.log(response)\r\n\r\n            }, (err) => {\r\n                //Validation error\r\n                if(err.response.status == 400) console.log(\"Email is incorrect\");\r\n                //All other errors\r\n                else{\r\n                    history.replace(history.location.pathname, { \r\n                        errorStatusCode: err.response.status\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <tr key={item.id}>\r\n            <td>{item.firstName}</td>\r\n            <td>{item.lastName}</td>\r\n            <td>{item.competence?.map(comp =>{\r\n                return(\r\n                    <div>{comp.name} {comp.year} year(s)</div>\r\n                )\r\n            })}</td>\r\n            <td>{item.startPeriod}</td>\r\n            <td>{item.endPeriod}</td>\r\n            <td>{item.dateOfBirth?.map(comp =>{\r\n                return(\r\n                    <div>{comp.year}-{comp.month}-{comp.day} </div>\r\n                )\r\n            })}</td>\r\n            <td>{item.date}</td>\r\n            <td><select name=\"status\" onChange={(event)=>{ updateStatus(event) }}>\r\n\r\n                {(item.status === \"unhandled\")?\r\n                    <option selected=\"selected\" value=\"unhandled\">unhandled</option>\r\n                :<option value=\"unhandled\">unhandled</option>}\r\n\r\n                {(item.status === \"rejected\")?\r\n                    <option selected=\"selected\" value=\"rejected\">rejected</option>\r\n                    :<option value=\"rejected\">rejected</option>}\r\n\r\n                {(item.status === \"accepted\")?\r\n                    <option selected=\"selected\" value=\"accepted\">accepted</option>\r\n                    :<option value=\"accepted\">accepted</option>}\r\n            </select></td>\r\n        </tr>\r\n    )\r\n\r\n}\r\n\r\nexport default ApplicationElement;","import React from \"react\"\r\nimport ApplicationElement from \"./ApplicationElement\";\r\nimport \"./css/ApplicationList.css\"\r\n\r\n/**\r\n * The admin application list header.\r\n * @param applications an object containing all applications that the page should render in a list\r\n * @returns {JSX.Element} renders a list header and calls the <ApplicationElement/> component to render all rows\r\n */\r\nconst ApplicationList = ({apiCall, applications} ) => {\r\n\r\n    return(\r\n        <table className=\"content-table\">\r\n            <thead>\r\n            <tr>\r\n                <th>fname</th>\r\n                <th>lname</th>\r\n                <th>skills</th>\r\n                <th>startP</th>\r\n                <th>endP</th>\r\n                <th>date of birth</th>\r\n                <th>application made at</th>\r\n                <th>application status</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {applications?.map(item =>{\r\n                return(\r\n                    <ApplicationElement apiCall={apiCall} item={item}/>\r\n                )\r\n            })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default ApplicationList;","import React, {useEffect, useState} from \"react\"\r\nimport { Form, Formik, useField } from \"formik\";\r\nimport {Button, Checkbox, FormControlLabel} from \"@material-ui/core\";\r\nimport ApplicationList from \"./ApplicationList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./css/Header.css\";\r\n/**\r\n * Handles the admin page.\r\n * A logged in admin may go through all applications and sort by skills\r\n * The admin can also give a status to an application (accepted, unhandled, rejected)\r\n * @param apiCall model that handles axios api calls to the backend REST API\r\n * @returns {JSX.Element} renders the Admin page showing applications\r\n */\r\nconst AdminApplications = ({apiCall}) => {\r\n    //constants from useState and redux\r\n    const [result, setResult] = useState([])\r\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\r\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\r\n    const history = useHistory();\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n\r\n    //life cycle methods\r\n    useEffect(() => {\r\n        if ((role !== \"admin\") || (isLoggedIn === false))\r\n            window.location = \"/\"\r\n    }, [isLoggedIn, role])\r\n\r\n\r\n    //custom formik components\r\n    const CustomCheckboxes = ({label, ...props}) => {\r\n        const [field] = useField(props);\r\n        return <FormControlLabel {...field} control={<Checkbox/>} label={label}/>;\r\n    }\r\n\r\n\r\n    return (\r\n    <div className=\"outer-wrapper\">\r\n        {isLoading? <Loader visible={isLoading} type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80}/>:\r\n        <div >\r\n            {(role === \"admin\") && (isLoggedIn === true)\r\n                ? <div  >\r\n                    <Formik\r\n                        initialValues={{\r\n\r\n                            competences: []\r\n\r\n                        }}\r\n                        onSubmit={(data, {setSubmitting}) => {\r\n                            setSubmitting(true);\r\n                            let param = \"posts\"\r\n                             if (data.competences.length === 1) {\r\n                                param = \"posts/competence=\" + data.competences[0];\r\n                            }\r\n                            else if (data.competences.length === 2) {\r\n                                param = \"posts/competence=\" + data.competences[0] + \"&=\" + data.competences[1];\r\n                              \r\n                            } \r\n                            else if (data.competences.length === 3) {\r\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2];\r\n                            }\r\n                            else if (data.competences.length === 4) {\r\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2]+ \"&=\" + data.competences[3];\r\n                            }\r\n                            else if (data.competences.length === 5) {\r\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2]+ \"&=\" + data.competences[3]+ \"&=\" + data.competences[4];\r\n                            }\r\n                              console.log(param)\r\n\r\n                            const instance = apiCall.apiAxios();\r\n                            instance.get(param).then(r =>( setSubmitting(false), setResult(r.data),setResult(r.data)))\r\n                            .catch(err => {\r\n                                setLoading(isLoading => !isLoading);\r\n                                //Validation error\r\n                                if(err.response.status == 400) console.log(err);\r\n                                //All other errors\r\n                                else{\r\n                                    history.replace(history.location.pathname, { \r\n                                        errorStatusCode: err.response.status\r\n                                    });\r\n                                }\r\n                            })\r\n                        }}\r\n                    >\r\n                        {({values, isSubmitting, errors}) => (\r\n                            <Form>\r\n                                <CustomCheckboxes name=\"competences\" value=\"A-skills\" type=\"checkbox\" label=\"A-skills\"/>\r\n                                <CustomCheckboxes name=\"competences\" value=\"B-skills\" type=\"checkbox\" label=\"B-skills\"/>\r\n                                <CustomCheckboxes name=\"competences\" value=\"C-skills\" type=\"checkbox\" label=\"C-skills\"/>\r\n                                <CustomCheckboxes name=\"competences\" value=\"D-skills\" type=\"checkbox\" label=\"D-skills\"/>\r\n                                <CustomCheckboxes name=\"competences\" value=\"E-skills\" type=\"checkbox\" label=\"E-skills\"/>\r\n                                <Button disabled={isSubmitting} type=\"submit\">Get Applications</Button>\r\n                                <div>\r\n                                    <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                                    <pre>{JSON.stringify(errors, null, 2)}</pre>\r\n                                </div>\r\n                            </Form>\r\n\r\n                        )}\r\n                    </Formik>\r\n                    {(result.length > 0) ? <ApplicationList apiCall={apiCall} applications={result}/> : \"\"}\r\n                </div>\r\n                : \"\"}\r\n        </div>}</div>\r\n    )\r\n}\r\n\r\nexport default AdminApplications;","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signOut} from \"../Model/Redux/Actions/AuthActions\";\r\nimport \"./css/Header.css\";\r\n\r\n/**\r\n * Header component. Renders logo and logout button\r\n * @returns {JSX.Element} returns header, logo and logout button\r\n */\r\nconst Header = () => {\r\n    //constants from redux\r\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\r\n    const loginRole = useSelector(state => state.UserReducer.userInfo[0].role);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    return (\r\n        <div className=\"Header-wrapper\">\r\n            <div className=\"logo\">Recruitment Logo Here</div>\r\n            {isLoggedIn\r\n                ? <button className=\"authButton\" onClick={ ()=> dispatch(signOut())  }>Log out</button>\r\n                : \"\"}\r\n            {loginRole === \"admin\"\r\n                ? <button className=\"migrateButton\" onClick={ ()=> { window.location = \"/admin/Migrate\" }  }>Migrate from old DB</button>\r\n                : \"\"}\r\n            {loginRole === \"admin\"\r\n                ? <button className=\"migrateButton\" onClick={ ()=> { window.location = \"/admin/applications\" }  }>Handle Applications</button>\r\n                : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signOut} from \"../Model/Redux/Actions/AuthActions\";\r\nimport \"./css/Header.css\";\r\n/**\r\n * View presented when API error occurs.\r\n * @returns {JSX} graphical view \r\n */\r\nexport const Page404 = () => (\r\n    <div className=\"error\">\r\n        <h1>404 Error</h1>\r\n        <p>The requested URL was not found on this server.</p>\r\n        <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\r\n    </div>\r\n);\r\n/**\r\n * View presented when API error occurs.\r\n * 401 error occurs when a client authentication has expired or API error were current authentication session is lost. \r\n * Client is logged-out of main app and navigated to log-in view. \r\n * @returns {JSX} graphical view \r\n */\r\nexport const Page401 = () => {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div className=\"error\">\r\n            <h1>401 Error</h1>\r\n            <p>Unauthorized access.</p>\r\n            <Link to=\"/\"><button type=\"button\" onClick={()=> dispatch(signOut())}>back to main app</button></Link>\r\n        </div>\r\n    );\r\n};\r\n/**\r\n * View presented when API error occurs.\r\n * @returns {JSX} graphical view \r\n */\r\nexport const Page500 = () => (\r\n    <div className=\"error\">\r\n        <h1>500 Error</h1>\r\n        <p>Server encountered a internal error and cannot handle the request.</p>\r\n        <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\r\n    </div>\r\n);\r\n/**\r\n * View presented when API error occurs.\r\n * @returns {JSX} graphical view \r\n */\r\nexport const Page501 = () => (\r\n    <div className=\"error\">\r\n        <h1>501 Error</h1>\r\n        <p>Server encountered a error and currently cannot handle the request.</p> \r\n        <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\r\n    </div>\r\n);\r\n/**\r\n * View presented when API error occurs.\r\n * @returns {JSX} graphical view \r\n */\r\nexport const Page503 = () => (\r\n    <div className=\"error\">\r\n        <h1>503 Error</h1>\r\n        <p>Server encountered a error and currently cannot handle the request.</p> \r\n        <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\r\n    </div>\r\n);\r\n\r\n","import React, {useEffect, useState}  from 'react'\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport {TextField, Button} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst MigrateFromOldDB = ({apiCall}) => {\r\n\r\n    //life cycle methods\r\n    useEffect(() => {\r\n        if ((role !== \"admin\") || (isLoggedIn === false))\r\n            window.location = \"/\"\r\n    }, [isLoggedIn, role])\r\n\r\n    \r\n    //constants from useState and redux\r\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\r\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\r\n\r\n     //life cycle methods\r\n     useEffect(() => {\r\n        if ((role !== \"admin\") || (isLoggedIn === false))\r\n            window.location = \"/\"\r\n    }, [isLoggedIn, role])\r\n\r\n    let incompleteUsers = [];\r\n    let errorMsgInfo = [];\r\n    let errorMsgInfoApplications = [];\r\n    let incompleteApplications = [];\r\n    let completedUsers = [];\r\n    let completedApplications = [];\r\n    let compReason = \"\";\r\n    let applicationsSentToDB = [];\r\n    let allEmails = [];\r\n\r\n    const handleFiles = (files) => {\r\n\r\n        var reader = new FileReader();\r\n        reader.onload = (e) => {\r\n\r\n            let num = 1;\r\n            let str = reader.result.split(\";\")[0];\r\n            while (typeof str == \"string\") {\r\n\r\n                if (str.includes(\"person\") || str.includes(\"competence_profile\") || str.includes(\"availability\")) {\r\n                    migrationHandler(str)\r\n                }\r\n                str = reader.result.split(\";\")[num++];\r\n            }\r\n\r\n        }\r\n        reader.readAsText(files[0]);\r\n    }\r\n\r\n    const migrationHandler = (sqlRow) => {\r\n        let splitByWord = \"\";\r\n        let SQLSTATE = \"\";\r\n        console.log(sqlRow)\r\n        if (sqlRow.includes(\"INSERT INTO person\") || sqlRow.includes('INSERT INTO \"person\"')) {\r\n            SQLSTATE = \"MIGRATE_USER\"\r\n            splitByWord = \"person\";\r\n        } else if (sqlRow.includes(\"INSERT INTO competence_profile\") || sqlRow.includes('INSERT INTO \"competence_profile\"')) {\r\n            SQLSTATE = \"MIGRATE_APPLICATION\"\r\n            splitByWord = \"competence_profile\";\r\n        } else {\r\n            SQLSTATE = \"MIGRATE_APPLICATION\"\r\n            splitByWord = \"availability\";\r\n        }\r\n        let sqlValues = sqlRow.split(\"VALUES\");\r\n        console.log(sqlValues)\r\n\r\n        //get the order of the inputs\r\n        let order = sqlValues[0].split(\"\\\\\").join(\"\");\r\n        order = order.split(splitByWord).join(\"\");\r\n        order = order.split(\"INSERT INTO\");\r\n        order = order[1].split(\"(\").join(\"\");\r\n        order = order.split(\"↵\").join(\"\");\r\n        order = order.split(\")\").join(\"\");\r\n        order = order.split('\"').join(\"\");\r\n        order = order.split(\"’\").join(\"\");\r\n        console.log(order.split(\"’\").join(\"\"))\r\n        order = order.split(\" \").join(\"\");\r\n        order = order.split(\";\").join(\"\");\r\n        order = order.split(\",\");\r\n        console.log(order)\r\n\r\n\r\n        //get the inputs\r\n        sqlValues = sqlValues[1].split(\"\\\\\").join(\"\");\r\n        sqlValues = sqlValues.split(\"(\").join(\"\");\r\n        sqlValues = sqlValues.split(\")\").join(\"\");\r\n        sqlValues = sqlValues.split(\"↵\").join(\"\");\r\n        sqlValues = sqlValues.split('\"').join(\"\");\r\n        sqlValues = sqlValues.split(\"’\").join(\"\");\r\n        sqlValues = sqlValues.split(\"'\").join(\"\");\r\n        sqlValues = sqlValues.split(\";\").join(\"\");\r\n        console.log(sqlValues)\r\n        let newData = sqlValues.split(\" \").join(\"\");\r\n        let split = newData.split(\",\");\r\n        console.log(split.length)\r\n\r\n\r\n        //save order of inputs that exists\r\n        let orderOfData = {}\r\n        let i = 0;\r\n\r\n\r\n        if (splitByWord === \"person\") {\r\n            order.forEach((val) => {\r\n                if (val === \"_id\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.userID = i;\r\n                } else if (val === \"name\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.firstname = i;\r\n                } else if (val === \"surname\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.lastname = i;\r\n                } else if (val === \"ssn\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.dateOfBirth = i;\r\n                } else if (val === \"email\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.email = i;\r\n                } else if (val === \"password\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.password = i;\r\n                } else if (val === \"role_id\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.role = i;\r\n                } else if (val === \"username\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.username = i;\r\n                }\r\n                i++;\r\n            })\r\n        } else if (splitByWord === \"competence_profile\") {\r\n            order.forEach((val) => {\r\n                if (val === \"_id\" && (split[i] !== \"NULL\")) {//competence_profile_id\r\n                    orderOfData.compProfID = i;\r\n                } else if (val === \"person_id\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.userID = i;\r\n                } else if (val === \"competence_id\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.competenceID = i;\r\n                } else if (val === \"years_of_experience\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.compYear = i;\r\n                }\r\n                i++;\r\n            })\r\n\r\n        } else {//availability\r\n            order.forEach((val) => {\r\n                if (val === \"_id\" && (split[i] !== \"NULL\")) {//availability_id\r\n                    orderOfData.availableID = i;\r\n                } else if (val === \"person_id\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.userID = i;\r\n                } else if (val === \"from_date\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.fromDate = i;\r\n                } else if (val === \"to_date\" && (split[i] !== \"NULL\")) {\r\n                    orderOfData.toDate = i;\r\n                }\r\n                i++;\r\n            })\r\n        }\r\n\r\n\r\n        console.log(orderOfData)\r\n\r\n\r\n        //handle migrate user\r\n        if (SQLSTATE === \"MIGRATE_USER\") {//if sql is INSERT INTO \"person\"\r\n            console.log(split)\r\n\r\n\r\n            //check for stored info -> add info -> is enough -> API, remove errormsg\r\n            //else store info in array, update errormsg\r\n            let userInfo = {};\r\n            incompleteUsers.forEach((user) => {\r\n                if (user.userID === split[orderOfData.userID]) {//found information\r\n                    console.log(user)\r\n                    userInfo = user\r\n\r\n\r\n                }\r\n\r\n            })\r\n\r\n\r\n            console.log(orderOfData)\r\n            console.log(orderOfData.email);\r\n            console.log(split[orderOfData.firstname]);\r\n            if (orderOfData.username >= 0) {\r\n                userInfo.username = split[orderOfData.username]\r\n            }\r\n            if (orderOfData.email >= 0) {\r\n                userInfo.email = split[orderOfData.email]\r\n\r\n                let stat = false;\r\n                allEmails.forEach((val) => {\r\n                    if (val.userID === split[orderOfData.userID]) {\r\n                        stat = true;\r\n                    }\r\n                })\r\n                if (stat === false) {\r\n                    allEmails.push({userID: split[orderOfData.userID], email: split[orderOfData.email]})\r\n                } else {\r\n                    stat = false;\r\n                }\r\n            }\r\n            if (orderOfData.password >= 0) {\r\n                userInfo.password = split[orderOfData.password]\r\n            }\r\n            if (orderOfData.firstname >= 0) {\r\n                userInfo.firstName = split[orderOfData.firstname]\r\n            }\r\n            if (orderOfData.lastname >= 0) {\r\n                userInfo.lastName = split[orderOfData.lastname]\r\n            }\r\n            if (orderOfData.dateOfBirth >= 0) {\r\n                userInfo.dateOfBirth = split[orderOfData.dateOfBirth]\r\n                let dob = split[orderOfData.dateOfBirth].split(\"-\").join(\"\");\r\n                let year = dob.substring(0, 4);\r\n                let month = dob.substring(4, 6);\r\n                let day = dob.substring(6, 8);\r\n                userInfo.dateOfBirth =\r\n                    [\r\n                        {\r\n                            \"year\": parseInt(year),\r\n                            \"month\": parseInt(month),\r\n                            \"day\": parseInt(day)\r\n                        }\r\n                    ]\r\n            }\r\n            if (orderOfData.role >= 0) {\r\n                let role;\r\n                if (parseInt(split[orderOfData.role]) === 1) {\r\n                    role = \"admin\";\r\n                } else {\r\n                    role = \"client\";\r\n                }\r\n                userInfo.role = role;\r\n            }\r\n            console.log(userInfo)\r\n\r\n            userInfo.userID = split[orderOfData.userID]\r\n            console.log(split[orderOfData.userID])\r\n\r\n            console.log(Object.keys(userInfo).length)\r\n            if (Object.keys(userInfo).length < 8) {\r\n                incompleteUsers.push(userInfo)\r\n\r\n                let errorMessage = \"The following attributes are missing to be able to migrate this user to the new system:\";\r\n                if (!userInfo.email) {\r\n                    errorMessage = errorMessage + \" email,\"\r\n                }\r\n                if (!userInfo.username) {\r\n                    errorMessage = errorMessage + \" username,\"\r\n                }\r\n                if (!userInfo.password) {\r\n                    errorMessage = errorMessage + \" password,\"\r\n                }\r\n                if (!userInfo.firstName) {\r\n                    errorMessage = errorMessage + \" firstName,\"\r\n                }\r\n                if (!userInfo.lastName) {\r\n                    errorMessage = errorMessage + \" lastName,\"\r\n                }\r\n                if (!userInfo.dateOfBirth) {\r\n                    errorMessage = errorMessage + \" dateOfBirth/ssn,\"\r\n                }\r\n                errorMsgInfo = errorMsgInfo.filter((value) => {\r\n                    return value.userID !== split[orderOfData.userID];\r\n                })\r\n                errorMsgInfo.push({\r\n                    \"userID\": split[orderOfData.userID],\r\n                    \"msg\": errorMessage\r\n                })\r\n                console.log(userInfo)\r\n                console.log(incompleteUsers)\r\n            } else {\r\n                console.log(\"DONE\")\r\n                errorMsgInfo = errorMsgInfo.filter((value) => {\r\n                    return value.userID !== split[orderOfData.userID];\r\n                })\r\n                //call api\r\n\r\n                console.log(userInfo)\r\n                completedUsers.push(userInfo)\r\n\r\n\r\n                const instance = apiCall.apiAxios();\r\n\r\n                instance.post('auth/register', {\r\n                    \"data\": {\r\n                        \"username\": userInfo.username,\r\n                        \"email\": userInfo.email,\r\n                        \"password\": userInfo.password,\r\n                        \"firstName\": userInfo.firstName,\r\n                        \"lastName\": userInfo.lastName,\r\n                        \"dateOfBirth\": userInfo.dateOfBirth,\r\n                        \"role\": userInfo.role\r\n\r\n                    }\r\n\r\n                })\r\n                    .then((response) => {\r\n                        alert(\"migration of user was successfull!\")\r\n                        let done = false;\r\n                        completedApplications.forEach((application) => {\r\n                            if (application.userID === split[orderOfData.userID] && done === false) {//found information\r\n                                console.log(application)\r\n                                console.log(userInfo)\r\n\r\n                                //make API call to applications\r\n                                const instance = apiCall.apiAxios();\r\n                                instance.post('posts', {\r\n                                    startPeriod: application.fromDate,\r\n                                    endPeriod: application.toDate,\r\n                                    dateOfBirth: userInfo.dateOfBirth,\r\n                                    status: \"unhandled\",\r\n                                    firstName: userInfo.firstName,\r\n                                    lastName: userInfo.lastName,\r\n                                    competence: application.competenceID,\r\n                                    email: userInfo.email,\r\n                                }).then(() => {\r\n                                    console.log(\"application migration success!\")\r\n                                    alert(\"application migration success!\")\r\n                                    errorMsgInfoApplications = errorMsgInfoApplications.filter((value) => {\r\n                                        return value.userID !== split[orderOfData.userID];\r\n                                    })\r\n                                    applicationsSentToDB.push({id: split[orderOfData.userID]})\r\n                                }).catch((err) => {\r\n                                    console.log(err)\r\n                                })\r\n                                //using {application} and {userInfo}\r\n                                done = true;\r\n                            }\r\n\r\n                        })\r\n                        done = false;\r\n\r\n                    }, (err) => {\r\n                        console.log(err);\r\n                        alert(\"something went wrong\");\r\n                    });\r\n\r\n\r\n            }\r\n\r\n\r\n        } else if (SQLSTATE === \"MIGRATE_APPLICATION\") {\r\n            let applicationInfo = {};\r\n            incompleteApplications.forEach((application) => {\r\n                if (application.userID === split[orderOfData.userID]) {//found information\r\n                    console.log(application)\r\n                    applicationInfo = application\r\n\r\n                }\r\n\r\n            })\r\n            let competenceName = \"\";\r\n\r\n\r\n            if (orderOfData.compProfID >= 0) {\r\n                applicationInfo.compProfID = split[orderOfData.compProfID]\r\n            }\r\n            if (orderOfData.userID >= 0) {\r\n                applicationInfo.userID = split[orderOfData.userID]\r\n            }\r\n            if (orderOfData.competenceID >= 0) {\r\n\r\n\r\n                console.log(split[orderOfData.competenceID])\r\n                if (parseInt(split[orderOfData.competenceID]) === 1) {\r\n                    competenceName = \"A-skills\";\r\n                    applicationInfo.compName = competenceName;\r\n                }else if(parseInt(split[orderOfData.competenceID]) === 2){\r\n                    competenceName = \"B-skills\";\r\n                    applicationInfo.compName = competenceName;\r\n                }else if(parseInt(split[orderOfData.competenceID]) === 3){\r\n                    competenceName = \"C-skills\";\r\n                    applicationInfo.compName = competenceName;\r\n                }else if(parseInt(split[orderOfData.competenceID]) === 4){\r\n                    competenceName = \"D-skills\";\r\n                    applicationInfo.compName = competenceName;\r\n                }else {\r\n                    competenceName = \"E-skills\";\r\n                    applicationInfo.compName = competenceName;\r\n                }\r\n\r\n\r\n\r\n                if (compReason !== \"DONE_AND_SENT\") {\r\n                    if (applicationInfo.competenceID === undefined) {\r\n                        console.log(applicationInfo)\r\n                        applicationInfo.competenceID = [];\r\n                        applicationInfo.competenceID.push({\r\n                            \"name\": competenceName,\r\n                            \"year\": parseFloat(split[orderOfData.compYear])\r\n                        })\r\n\r\n                    } else {\r\n                        console.log(\"new comp: \" + competenceName)\r\n                        console.log(\"old comp: \" + applicationInfo.competenceID)\r\n                        applicationInfo.competenceID.push({\r\n                            \"name\": competenceName,\r\n                            \"year\": parseFloat(split[orderOfData.compYear])\r\n                        })\r\n                        console.log(applicationInfo)\r\n                    }\r\n                }\r\n                applicationsSentToDB.forEach((app) => {\r\n                    if (app.id === split[orderOfData.userID]) {\r\n\r\n                        //skip every other step\r\n                        compReason = \"DONE_AND_SENT\";\r\n                        //get email from allemail\r\n                        allEmails.forEach((val) => {\r\n                            if (val.userID === split[orderOfData.userID]) {\r\n                                //send to DB update post\r\n                                console.log(val)\r\n                                const instance = apiCall.apiAxios();\r\n                                instance.post('posts/updateskill', {\r\n                                    \"competence\": {\r\n                                        \"name\": competenceName,\r\n                                        \"year\": parseFloat(split[orderOfData.compYear])\r\n                                    },\r\n                                    \"email\": val.email,\r\n                                }).then(() => {\r\n                                    console.log(\"updated application migration success!\")\r\n                                    alert(\"updated application migration success!\")\r\n                                }).catch((err) => {\r\n                                    console.log(err)\r\n                                    alert(\"something went wrong in update\")\r\n                                })\r\n                            }\r\n                        })\r\n\r\n                    }\r\n                })\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n            if (orderOfData.compYear >= 0) {\r\n                applicationInfo.compYear = split[orderOfData.compYear]\r\n            }\r\n            if (orderOfData.availableID >= 0) {\r\n                applicationInfo.availableID = split[orderOfData.availableID]\r\n            }\r\n            if (orderOfData.fromDate >= 0) {\r\n                applicationInfo.fromDate = split[orderOfData.fromDate]\r\n            }\r\n            if (orderOfData.toDate >= 0) {\r\n                applicationInfo.toDate = split[orderOfData.toDate]\r\n            }\r\n\r\n\r\n            console.log(Object.keys(applicationInfo).length);\r\n\r\n            if (compReason !== \"DONE_AND_SENT\") {\r\n                if (Object.keys(applicationInfo).length < 7) {\r\n                    incompleteApplications.push(applicationInfo)\r\n\r\n                    let errorMessage = \"The following attributes are missing to be able to migrate this application to the new system:\";\r\n                    if (!applicationInfo.compYear) {\r\n                        errorMessage = errorMessage + \" years_of_experience,\"\r\n                    }\r\n                    if (!applicationInfo.fromDate) {\r\n                        errorMessage = errorMessage + \" available from_date,\"\r\n                    }\r\n                    if (!applicationInfo.toDate) {\r\n                        errorMessage = errorMessage + \" available to_date,\"\r\n                    }\r\n                    if (!applicationInfo.competenceID) {\r\n                        errorMessage = errorMessage + \" competenceID,\"\r\n                    }\r\n\r\n                    errorMsgInfoApplications = errorMsgInfoApplications.filter((value) => {\r\n                        return value.userID !== split[orderOfData.userID];\r\n                    })\r\n                    errorMsgInfoApplications.push({\r\n                        \"userID\": split[orderOfData.userID],\r\n                        \"msg\": errorMessage\r\n                    })\r\n                    console.log(applicationInfo)\r\n                    console.log(incompleteApplications)\r\n                } else {\r\n                    console.log(\"DONE\")\r\n\r\n                    completedApplications.push(applicationInfo)\r\n\r\n                    let savedUser = {};\r\n                    completedUsers.forEach((user) => {\r\n                        if (user.userID === split[orderOfData.userID]) {//found information\r\n                            console.log(user)\r\n                            savedUser = user\r\n                        }\r\n\r\n                    })\r\n                    errorMsgInfoApplications = errorMsgInfoApplications.filter((value) => {\r\n                        return value.userID !== split[orderOfData.userID];\r\n                    })\r\n                    if (Object.keys(savedUser).length === 0) {\r\n                        console.log(\"APPLICATION DONE WAIT FOR USER\")\r\n\r\n                        errorMsgInfoApplications = errorMsgInfoApplications.filter((value) => {\r\n                            return value.userID !== split[orderOfData.userID];\r\n                        })\r\n                        errorMsgInfoApplications.push({\r\n                            userID: applicationInfo.userID,\r\n                            \"msg\": \"This application is ready to migrate to the new DB as soon as user with same userID/person_id has been migrated\"\r\n                        })\r\n\r\n                    } else {\r\n\r\n                        let skipWriteAgain = false;\r\n                        console.log(applicationsSentToDB)\r\n                        console.log(split[orderOfData.userID])\r\n                        applicationsSentToDB.forEach((val) => {\r\n                            if (parseInt(val.id) === parseInt(split[orderOfData.userID])) {\r\n                                console.log(val)\r\n                                skipWriteAgain = true\r\n                            }\r\n                        })\r\n                        if (skipWriteAgain === false) {\r\n                            console.log(\"CREATE APPLICATION AND SEND TO DB\")\r\n                            //call api\r\n\r\n                            const instance = apiCall.apiAxios();\r\n                            instance.post('posts', {\r\n                                startPeriod: applicationInfo.fromDate,\r\n                                endPeriod: applicationInfo.toDate,\r\n                                dateOfBirth: savedUser.dateOfBirth,\r\n                                status: \"unhandled\",\r\n                                firstName: savedUser.firstName,\r\n                                lastName: savedUser.lastName,\r\n                                competence: applicationInfo.competenceID,\r\n                                email: savedUser.email,\r\n                            }).then(() => {\r\n                                applicationsSentToDB.push({\"id\":split[orderOfData.userID]})\r\n                                console.log(\"application migration success!\")\r\n                                alert(\"application migration success!\")\r\n                            }).catch((err) => {\r\n                                console.log(err)\r\n                                alert(\"something went wrong\")\r\n                            })\r\n                        }\r\n                        skipWriteAgain = false;\r\n                    }\r\n\r\n\r\n                    console.log(applicationInfo)\r\n\r\n                }\r\n\r\n            }\r\n            compReason = \"\";\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n\r\n            <input type=\"file\" onChange={(event) => {\r\n                handleFiles(event.target.files)\r\n            }}/>\r\n            <Formik\r\n                initialValues={{VALUES: \"\"}}\r\n                onSubmit={(data, {setSubmitting, resetForm}) => {\r\n\r\n                    setSubmitting(true);\r\n                    resetForm();\r\n\r\n                    if (data.VALUES.includes(\"person\") || data.VALUES.includes(\"competence_profile\") || data.VALUES.includes(\"availability\")) {\r\n                        migrationHandler(data.VALUES);\r\n                    }\r\n\r\n\r\n                    setSubmitting(false);\r\n                }}\r\n            >\r\n                {({values, isSubmitting}) => (\r\n                    <div>\r\n                        <Form>\r\n                            <div>\r\n                                <div>Insert sql code here:</div>\r\n                                <Field\r\n                                    placeholder=\"values\"\r\n                                    name=\"VALUES\"\r\n                                    type=\"input\"\r\n                                    as={TextField}\r\n                                />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <Button disabled={isSubmitting} type=\"submit\">Get result</Button>\r\n                            </div>\r\n                            <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                            <pre>Migration issues \"users\": {JSON.stringify(errorMsgInfo, null, 2)}</pre>\r\n                            <pre>Migration issues \"applications\": {JSON.stringify(errorMsgInfoApplications, null, 2)}</pre>\r\n\r\n                        </Form>\r\n                    </div>\r\n                )}\r\n\r\n\r\n            </Formik>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MigrateFromOldDB;","import {Component} from \"react\";\r\nimport './App.css';\r\nimport {Route, Switch, Link} from \"react-router-dom\"\r\n\r\n//models\r\nimport ApiCall from './Model/apiCall';\r\nimport Model from './Model/model'\r\n\r\n//presenter\r\nimport {Expertise} from './Views/Expertise'\r\n//views\r\nimport Authentication from \"./Views/Authentication\";\r\nimport SignUpAdmin from \"./Views/SignUpAdmin\";\r\nimport AdminApplications from \"./Views/AdminApplications\";\r\nimport Header from \"./Views/Header\";\r\nimport {Page404} from \"./Views/ErrorPages\";\r\n\r\n\r\nimport MigrateFromOldDB from \"./Views/MigrateFromOldDB\";\r\n\r\n\r\n\r\n/**\r\n * Main file for the frontend\r\n * Handles initial import of the model and routing of the frontend app\r\n */\r\nclass App extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            apiCall: new ApiCall(),\r\n            model: new Model()\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"applicationApp\">\r\n                <header className=\"recruitmentApp\">\r\n                    <Header/>\r\n                </header>\r\n                <Switch>\r\n                    <Route\r\n                        exact path=\"/\"\r\n                        render={() => <Authentication apiCall={this.state.apiCall}/>}\r\n                    />\r\n                    <Route\r\n                        exact path=\"/admin/signup\"\r\n                        render={() => <SignUpAdmin/>}\r\n                    />\r\n                    <Route\r\n                        exact path=\"/user/application\"\r\n                        render={() => <Expertise model={this.state.model} apiCall={this.state.apiCall}/>}\r\n                    />\r\n                    <Route\r\n                        exact path=\"/admin/applications\"\r\n                        render={() => <AdminApplications apiCall={this.state.apiCall}/>}\r\n                    />\r\n                    <Route\r\n\r\n                        exact path=\"/admin/Migrate\"\r\n                        render={() => <MigrateFromOldDB apiCall={this.state.apiCall}/>}\r\n                    />\r\n\r\n                    <Route\r\n                        exact path=\"*\"\r\n                        render={() => <Page404/>}\r\n                    />\r\n                </Switch>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initState =\r\n    {\r\n        userInfo: [\r\n            {\r\n                isLoggedIn: false,\r\n                role: null,\r\n                fname: \"\",\r\n                lname: \"\",\r\n                dateOfBirth: \"\",\r\n                email: \"\",\r\n            }\r\n        ]\r\n    }\r\n/**\r\n * A reducer that handles login and signup\r\n * @param state the current state of this reducer\r\n * @param action the action that is to be performed\r\n * @returns {{userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}]}}\r\n */\r\nconst UserReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case \"LOG_IN_USER\":\r\n            return {\r\n\r\n                userInfo: [\r\n                    {\r\n                        isLoggedIn: true,\r\n                        role: action.role,\r\n                        fname: action.fname,\r\n                        lname: action.lname,\r\n                        dateOfBirth: action.dateOfBirth,\r\n                        email: action.email,\r\n                    }\r\n                ]\r\n\r\n            };\r\n        case \"LOG_OUT_USER\":\r\n            return {\r\n\r\n                userInfo: [\r\n                    {\r\n                        isLoggedIn: false,\r\n                        role: null,\r\n                        fname: \"\",\r\n                        lname: \"\",\r\n                        dateOfBirth: \"\",\r\n                        email: \"\",\r\n                    }\r\n                ]\r\n\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport default UserReducer;","import { combineReducers } from \"redux\";\r\nimport UserReducer from \"./UserReducer\";\r\n\r\n/**\r\n * This component combines all reducers in this Redux store\r\n * @type {Reducer<CombinedState<{UserReducer: ({userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}]}|{userInfo: [{fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}]}|{userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: string}]}|{userInfo: [{fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}]})}>>}\r\n */\r\nexport const AllReducers = combineReducers({\r\n    UserReducer\r\n})","import {applyMiddleware, compose, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\nimport { AllReducers } from \"./Reducers\"\r\n\r\n/**\r\n * Config Used to persist the redux store\r\n * @type {{storage, key: string}}\r\n */\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n}\r\n/**\r\n * A persisted combined reducer\r\n * @type {Reducer<CombinedState<{UserReducer: ({userInfo: {fname: (string|*), lname: (string|*), role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}[]}|{userInfo: {fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}[]}|{userInfo: {fname: (string|*), lname: (string|*), role: *, isLoggedIn: boolean, dateOfBirth: *, email: string}[]})}> & PersistPartial, unknown>}\r\n */\r\nconst persistedReducer = persistReducer(persistConfig, AllReducers)\r\n\r\n\r\nexport const ReduxStore = createStore(persistedReducer, applyMiddleware(thunk));\r\nexport const Persistor = persistStore(ReduxStore)\r\n","import React from 'react';\r\nimport { useLocation} from 'react-router-dom';\r\nimport { get } from 'lodash';\r\nimport { Page401, Page404, Page500, Page501, Page503 } from './Views/ErrorPages';\r\n/**\r\n * Handles API errors and presents appropriate view.\r\n * @param {Object} children \r\n * @returns Graphical view component\r\n */\r\nconst ErrorHandler = ({ children }) => {\r\n  const location = useLocation();\r\n\r\n  switch (get(location.state, 'errorStatusCode')) {\r\n    case 404:\r\n      return <Page404/>\r\n    case 401:\r\n      return <Page401/>\r\n    case 500:\r\n      return <Page500/>\r\n    case 501:\r\n      return <Page501/>\r\n    case 503:\r\n      return <Page503/>\r\n\r\n    default:\r\n      return children\r\n  }\r\n};\r\n\r\nexport default ErrorHandler;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {ReduxStore, Persistor} from \"./Model/Redux\"\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {PersistGate} from 'redux-persist/integration/react'\r\nimport ErrorHandler from './ErrorHandler'\r\n\r\nReactDOM.render(\r\n    <Provider store={ReduxStore}>\r\n        <PersistGate loading={null} persistor={Persistor}>\r\n            <BrowserRouter>\r\n                <ErrorHandler>\r\n                    <App/>\r\n                </ErrorHandler>\r\n            </BrowserRouter>\r\n        </PersistGate>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}