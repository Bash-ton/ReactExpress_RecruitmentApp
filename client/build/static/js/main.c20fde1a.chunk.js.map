{"version":3,"sources":["Model/apiCall.js","Model/model.js","Views/Expertise.js","Model/Redux/Actions/AuthActions.js","Views/Authentication.js","Views/SignUpAdmin.js","Views/ApplicationElement.js","Views/ApplicationList.js","Views/AdminApplications.js","Views/Header.js","App.js","reportWebVitals.js","Model/Redux/Reducers/UserReducer.js","Model/Redux/Reducers/index.js","Model/Redux/index.js","index.js"],"names":["ApiCall","axios","create","baseURL","withCredentials","credentials","headers","model","this","myExpertise","observers","name","filter","exp","notifyObserver","t","y","year","obs","concat","removeObserver","forEach","callback","o","Expertise","apiCall","isLoggedIn","useSelector","state","UserReducer","userInfo","role","useState","hasApplication","setHasApplication","apiAxios","get","then","r","console","log","status","catch","err","useEffect","window","location","getAllExpertise","allExpertise","setExpertice","getExpertise","setMyExpertise","addObserver","localStorage","setItem","instance","removeExpertise","n","expertise","addExpertise","done","info","post","startPeriod","start","endPeriod","end","dateOfBirth","month","day","firstName","fname","lastName","lname","competence","email","removeOption","e","removeSelectedExpertise","ExpertiseView","map","onClick","AddExpertiseForm","setYear","type","setType","setStart","setEnd","min","placeholder","onChange","event","target","value","k","confirm","signIn","user","dispatch","getState","data","Authentication","authStatus","setAuthStatus","changeAuthStatus","setChangeAuthStatus","useDispatch","AuthTextField","props","useField","field","meta","errorText","error","touched","TextField","helperText","AuthSchema","Yup","shape","required","password","of","max","initialValues","username","onSubmit","setSubmitting","resetForm","response","response1","alert","validationSchema","values","isSubmitting","errors","Button","disabled","JSON","stringify","SignUpAdmin","adminKey","as","url","ApplicationElement","item","comp","date","updateStatus","selected","id","ApplicationList","applications","className","AdminApplications","result","setResult","CustomCheckboxes","label","FormControlLabel","control","Checkbox","competences","param","length","Header","App","Model","exact","path","render","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","action","AllReducers","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","ReduxStore","createStore","applyMiddleware","thunk","Persistor","persistStore","ReactDOM","store","loading","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.c20fde1a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/**\r\n * Model that handles all axios HTTP calls to the express API.\r\n * Contains the base URL to the express API\r\n */\r\nexport default class ApiCall {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    apiAxios() {\r\n        return axios.create({\r\n            baseURL: \"/\",\r\n            withCredentials: true,\r\n            credentials: 'include',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n}\r\n      ","/**\r\n * Model that contains all available skills and current skills stored in the frontend\r\n */\r\nexport default class model{\r\n    constructor(){\r\n        this.myExpertise = [];\r\n        this.observers = [];\r\n    }\r\n    getExpertise(){\r\n        return this.myExpertise;\r\n    }\r\n    removeExpertise(name){\r\n\t\tthis.myExpertise = [...this.myExpertise.filter((exp) => exp.name !== name)];\r\n        this.notifyObserver();\r\n    }\r\n    addExpertise(t, y){\r\n        var exp = {name: t, year: y};\r\n        this.myExpertise = [...this.myExpertise, exp];\r\n        this.notifyObserver();\r\n    }\r\n    getAllExpertise(){\r\n        const exp = [\"A-skills\", \"B-skills\", \"C-skills\", \"D-skills\", \"E-skills\"];\r\n        return exp;\r\n    }\r\n\r\n    addObserver(obs){\r\n        this.observers = this.observers.concat(obs);\r\n        return () => this.removeObserver(obs);\r\n    }\r\n    \r\n    notifyObserver(){\r\n        this.observers.forEach(function(callback) {\r\n            callback();\r\n        });    \r\n    }\r\n    removeObserver(obs) {\r\n        this.observers = this.observers.filter(o => o !== obs)\r\n    }\r\n\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\n/**\r\n * Renders all views related to the client page.\r\n * @param model a model document used to get available skills and handle all skills in current application in progress before submitting\r\n * @param apiCall a model document handling all axios calls to the express API\r\n * @returns {JSX.Element} renders all views on the client page\r\n */\r\nfunction Expertise({model, apiCall}) {\r\n    //constants from redux store\r\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\r\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\r\n    const [hasApplication, setHasApplication] = useState(false);\r\n\r\n    //event handler checking if user already has made an application\r\n    const instance2 = apiCall.apiAxios();\r\n    instance2.get(\"posts/postEmail=client@kth.se\").then(r => (\r\n        console.log(r.status),\r\n            console.log(r),\r\n            setHasApplication(true)\r\n    )).catch(err => {\r\n        console.log(err)\r\n        setHasApplication(false)\r\n    })\r\n\r\n\r\n    //lifecycle methods\r\n    useEffect(() => {\r\n        if ((role !== \"client\") || (isLoggedIn === false))\r\n            window.location = \"/\"\r\n    }, [isLoggedIn, role])\r\n    useEffect(() => {\r\n        if ((role !== \"client\") || (isLoggedIn === false))\r\n            window.location = \"/\"\r\n    }, [])\r\n\r\n    const [allExpertise, setExpertice] = useState(model.getAllExpertise());\r\n    useEffect(() => setExpertice(model.getAllExpertise()), []);\r\n\r\n    const [myExpertise, setMyExpertise] = useState(model.getExpertise());\r\n    useEffect(function () {\r\n        return model.addObserver(function () {\r\n            setMyExpertise(model.getExpertise());\r\n        })\r\n    }, [model]);\r\n\r\n    //Ta bort: Modellen bestämmer om den vill läsa från localstorage eller inte.......\r\n    useEffect(() => localStorage.setItem('formData', myExpertise));\r\n\r\n    // eventhandlers\r\n    //remove selected state when chosen?\r\n    const removeSelectedExpertise = e => {\r\n        const exp = allExpertise.filter(name => name !== e);\r\n        setExpertice(exp);\r\n    }\r\n    const instance = apiCall.apiAxios();\r\n\r\n    return (\r\n        <div>\r\n            {((role === \"client\") && (isLoggedIn === true)) ?\r\n                <div>\r\n                    {!hasApplication ?\r\n                        <div>\r\n                            <ExpertiseView myExpertise={myExpertise} removeExpertise={n => {\r\n                                model.removeExpertise(n);\r\n                                setExpertice([...allExpertise, n])\r\n                            }}/>\r\n                            <AddExpertiseForm expertise={allExpertise}\r\n                                              addExpertise={(t, y) => model.addExpertise(t, y)}\r\n                                              done={(info) => instance.post('posts', {\r\n                                                  startPeriod: info.start,\r\n                                                  endPeriod: info.end,\r\n                                                  dateOfBirth: {\r\n                                                      year: info.dateOfBirth.year,\r\n                                                      month: info.dateOfBirth.month,\r\n                                                      day: info.dateOfBirth.day\r\n                                                  },\r\n                                                  status: \"unhandled\",\r\n                                                  firstName: info.fname,\r\n                                                  lastName: info.lname,\r\n                                                  competence: myExpertise,\r\n                                                  email: info.email,\r\n                                              })}\r\n                                              removeOption={(name) => removeSelectedExpertise(name)}\r\n                            /></div>\r\n                        : <div>You have already made an application. Please wait for us to give you a response</div>}\r\n                </div> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * This component renders the current skills in progress before submitting it\r\n * @param myExpertise object that contains all skills currently in the application\r\n * @param removeExpertise method used to remove skills from application\r\n * @returns {JSX.Element} renders a list of current skills in application\r\n */\r\nconst ExpertiseView = ({myExpertise, removeExpertise}) => (\r\n    <div>\r\n        {myExpertise.map(e =>\r\n            <tbody>\r\n            <tr key={e.name + e.year}>\r\n                <td>{e.name}</td>\r\n                <td>{e.year}</td>\r\n            </tr>\r\n            <button onClick={() => removeExpertise(e.name)}>remove</button>\r\n            </tbody>\r\n        )}\r\n    </div>\r\n);\r\n\r\n\r\n/**\r\n * A form that lets user input all relevant information used to create an application\r\n * @param expertise all currently available skills to choose from in the application\r\n * @param addExpertise method used to add a skill to the application\r\n * @param done method used so submit the application\r\n * @param removeOption method that removes one available skill from the {expertise} object when that skill already has been added to the form\r\n * @returns {JSX.Element} render the form to input skills to the application\r\n */\r\n const AddExpertiseForm = ({expertise, addExpertise, done, removeOption}) => {\r\n\r\n    const userInfo = useSelector(state => state.UserReducer.userInfo)\r\n    console.log(userInfo)\r\n    const handleSubmit = () => {\r\n        let ans = window.confirm(\"Are you sure you want to submit your application?\");\r\n        if (ans === true) {\r\n            //console.log(userInfo[0].dateOfBirth);\r\n            //debugger;\r\n            done({\r\n                start: start,\r\n                end: end,\r\n                fname: userInfo[0].fname,\r\n                lname: userInfo[0].lname,\r\n                status: \"unhandled\",\r\n                dateOfBirth: userInfo[0].dateOfBirth,\r\n                email: userInfo[0].email\r\n            });\r\n        }\r\n    }\r\n\r\n    const [year, setYear] = useState(0);\r\n    const [type, setType] = useState('');\r\n    const [start, setStart] = useState(\"\");\r\n    const [end, setEnd] = useState(\"\");\r\n    return (\r\n        <div>\r\n            <input type=\"number\" min=\"0\" placeholder=\"years of experience\"\r\n                   onChange={(event) => setYear(event.target.value)}/>\r\n            <select onChange={(event) => setType(event.target.value)}>\r\n                <option>choose your expertise</option>\r\n                {expertise.map((k) => <option key={k}>{k}</option>)}\r\n            </select>\r\n            <button onClick={() => {\r\n                addExpertise(type, year);\r\n                removeOption(type)\r\n            }}>add skill to application\r\n            </button>\r\n\r\n            <div>\r\n                <br/>\r\n                <input type=\"text\" min=\"0\" placeholder=\"available start period\" onChange={(event) => {\r\n                    setStart(event.target.value)\r\n                }}/>\r\n                <input type=\"text\" min=\"0\" placeholder=\"available end period\" onChange={(event) => {\r\n                    setEnd(event.target.value)\r\n                }}/>\r\n                <button onClick={() => {\r\n                    handleSubmit();\r\n                }}>confirm and send application\r\n                </button>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport {Expertise}; \r\n","/**\r\n * Redux action for signup\r\n * @param user object containing user information\r\n * @returns {function(*, *): void} a dispatch call to {UserReducer}\r\n */\r\nexport const signIn = (user) => {\r\n    return (dispatch, getState) => {\r\n        dispatch({type:\"LOG_IN_USER\", role:user.data.role, fname:user.data.firstName, lname: user.data.lastName, dateOfBirth: user.data.dateOfBirth, email: user.data.email})\r\n    }\r\n}\r\n\r\n/**\r\n * Redux action that sing out a user\r\n * @returns {function(*, *): void} a dispatch call to {UserReducer}\r\n */\r\nexport const signOut = () => {\r\n    return (dispatch, getState) => {\r\n        dispatch({type:\"LOG_OUT_USER\"})\r\n    }\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {Form, Formik, useField} from \"formik\";\r\nimport {TextField, Button, Select, MenuItem} from \"@material-ui/core\";\r\nimport * as Yup from \"yup\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signIn} from \"../Model/Redux/Actions/AuthActions\";\r\n\r\n//TODO remove the <Pre-tags> when done testing\r\n\r\n/**\r\n * This is the authentication page that handles login and signup including validation.\r\n * @param apiCall a model document containingn axios calls to the express rest API\r\n * @returns {JSX.Element} renders login and signup form\r\n */\r\nconst Authentication = ({apiCall}) => {\r\n\r\n    //constants from useState and redux\r\n    const [authStatus, setAuthStatus] = useState(\"Sign up\");\r\n    const [changeAuthStatus, setChangeAuthStatus] = useState(\"Login\");\r\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\r\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    //life cycle methods\r\n    useEffect(() => {\r\n        if (role === \"client\") {\r\n            window.location = \"/user/application\";\r\n\r\n        } else if (role === \"admin\") {\r\n            window.location = \"/admin/applications\";\r\n\r\n        }\r\n    }, [isLoggedIn])\r\n\r\n\r\n\r\n    //custom formik components\r\n    const AuthTextField = ({\r\n                               placeholder,\r\n                               ...props\r\n                           }) => {\r\n        const [field, meta] = useField(props);\r\n        const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n        return (\r\n            <TextField\r\n                placeholder={placeholder}\r\n                {...field}\r\n                helperText={errorText}\r\n                error={!!errorText}//casting string to boolean\r\n                type={props.type}\r\n            />\r\n        )\r\n    }\r\n    //yup schema for validation\r\n    const AuthSchema = Yup.object().shape({\r\n        email: Yup.string()\r\n            .min(4, 'Too Short!')\r\n            .required('Required')\r\n            .email('Invalid email'),\r\n        password: Yup.string()\r\n            .min(4, 'Too Short!')\r\n            .required('Required'),\r\n        firstName: (authStatus === \"Login\")\r\n            ? Yup.string()\r\n            : Yup.string()\r\n                .required('Required'),\r\n        lastName: (authStatus === \"Login\")\r\n            ? Yup.string()\r\n            : Yup.string()\r\n                .required('Required'),\r\n        dateOfBirth: Yup.array()\r\n            .of(\r\n                Yup.object().shape({\r\n                    year: (authStatus === \"Login\")\r\n                        ? Yup.number()\r\n                        : Yup.number().required('Required'),\r\n                    month: (authStatus === \"Login\")\r\n                        ? Yup.number()\r\n                        : (Yup.number()\r\n                            .min(1, \"must be between 1 and 12\")\r\n                            .max(12, \"must be between 1 and 31\")\r\n                            .required('Required')),\r\n                    day: (authStatus === \"Login\")\r\n                        ? Yup.number()\r\n                        : Yup.number()\r\n                            .min(1, \"must be between 1 and 31\")\r\n                            .max(31, \"must be between 1 and 31\")\r\n                            .required('Required'),\r\n                })\r\n            )\r\n    })\r\n\r\n    //event handlers\r\n    const handleAuthStatusChange = () => {\r\n        if (authStatus === \"Login\") {\r\n            setAuthStatus(\"Sign up\")\r\n            setChangeAuthStatus(\"Login\")\r\n        } else {\r\n            setAuthStatus(\"Login\")\r\n            setChangeAuthStatus(\"Sign up\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!isLoggedIn\r\n                ? <div>\r\n                    <Formik\r\n                        initialValues={{\r\n                            username: \"\",\r\n                            email: \"\",\r\n                            password: \"\",\r\n                            firstName: \"\",\r\n                            lastName: \"\",\r\n                            dateOfBirth: [{year: \"\", month: \"\", day: \"\"}]\r\n                        }}\r\n                        onSubmit={(data, {setSubmitting, resetForm}) => {\r\n                            setSubmitting(true);\r\n                            resetForm();\r\n\r\n                            if (authStatus === \"Sign up\") {\r\n                                const instance = apiCall.apiAxios();\r\n\r\n                                instance.post('auth/register', {data})\r\n                                    .then((response) => {\r\n\r\n                                        const instance = apiCall.apiAxios();\r\n                                        instance.post('auth/login', {email: data.email, password: data.password})\r\n                                            .then((response1) => {\r\n                                                dispatch(signIn(response1))\r\n                                            }, (error) => {\r\n                                                console.log(error);\r\n                                            });\r\n\r\n                                    }, (err) => {\r\n                                        console.log(err);\r\n                                        alert(\"email already in use\");\r\n                                    });\r\n                            } else {\r\n                                const instance = apiCall.apiAxios();\r\n                                instance.post('auth/login', {email: data.email, password: data.password})\r\n                                    .then((response1) => {\r\n\r\n                                        dispatch(signIn(response1))\r\n\r\n                                    }, () => {\r\n                                        alert(\"Wrong email and/or password\");\r\n                                    });\r\n                            }\r\n                            setSubmitting(false);\r\n                        }}\r\n                        validationSchema={AuthSchema}\r\n                    >\r\n                        {({values, isSubmitting, resetForm, errors}) => (\r\n                            <Form>\r\n                                <div>\r\n                                    <AuthTextField\r\n                                        placeholder=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"input\"\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <AuthTextField\r\n                                        placeholder=\"Password\"\r\n                                        name=\"password\"\r\n                                        type=\"password\"\r\n                                    />\r\n                                </div>\r\n                                {(authStatus === \"Sign up\") ? <div>\r\n                                    <AuthTextField\r\n                                        placeholder=\"Username\"\r\n                                        name=\"username\"\r\n                                        type=\"input\"\r\n                                    />\r\n                                </div> : \"\"}\r\n                                {(authStatus === \"Sign up\") ? <div>\r\n                                    <AuthTextField\r\n                                        placeholder=\"First Name\"\r\n                                        name=\"firstName\"\r\n                                        type=\"input\"\r\n                                    />\r\n                                </div> : \"\"}\r\n                                {(authStatus === \"Sign up\") ? <div>\r\n                                    <AuthTextField\r\n                                        placeholder=\"Last Name\"\r\n                                        name=\"lastName\"\r\n                                        type=\"input\"\r\n                                    />\r\n                                </div> : \"\"}\r\n                                {(authStatus === \"Sign up\") ? <div>\r\n                                    <AuthTextField\r\n                                        placeholder=\"Year\"\r\n                                        name=\"dateOfBirth[0].year\"\r\n                                        type=\"number\"\r\n                                    />\r\n                                    <AuthTextField\r\n                                        placeholder=\"Month\"\r\n                                        name=\"dateOfBirth[0].month\"\r\n                                        type=\"number\"\r\n                                    />\r\n                                    <AuthTextField\r\n                                        placeholder=\"Day\"\r\n                                        name=\"dateOfBirth[0].day\"\r\n                                        type=\"number\"\r\n                                    />\r\n                                </div> : \"\"}\r\n                                <div>\r\n                                    <Button disabled={isSubmitting} type=\"submit\">{authStatus}</Button>\r\n                                </div>\r\n\r\n                                <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                                <pre>{JSON.stringify(errors, null, 2)}</pre>\r\n\r\n\r\n                                <div onClick={() => {\r\n                                    handleAuthStatusChange();\r\n                                    resetForm()\r\n                                }}>{changeAuthStatus}</div>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n\r\n\r\n                </div>\r\n                : \"\"}\r\n        </div>\r\n    )\r\n}\r\nexport default Authentication;","import React from 'react'\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\n\r\n//TODO not used remove this later\r\nconst SignUpAdmin = () =>{\r\n\r\n    //event handlers\r\n    const changeView = (url) => {\r\n        window.location =  url\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ email: \"\", password: \"\", adminKey: \"\"}}\r\n                onSubmit={( data, { setSubmitting , resetForm}) =>{\r\n                    setSubmitting(true);\r\n                    resetForm();\r\n                    //make async calls here to auth\r\n                    console.log(\"submit:\", data);\r\n                    setSubmitting(false);\r\n                } }\r\n            >\r\n                {({  values, isSubmitting  })  => (\r\n                    <Form >\r\n                        <Field\r\n                            placeholder=\"Email\"\r\n                            name=\"email\"\r\n                            type=\"input\"\r\n                            as={TextField}\r\n                        />\r\n                        <div>\r\n                            <Field\r\n                                placeholder=\"Password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                as={TextField}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <Field\r\n                                placeholder=\"Key\"\r\n                                name=\"adminKey\"\r\n                                type=\"password\"\r\n                                as={TextField}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <Button disabled={isSubmitting} type=\"submit\">Sign up</Button>\r\n                        </div>\r\n                        <pre>{JSON.stringify(values, null, 2)}</pre>\r\n\r\n                    </Form>\r\n                )}\r\n\r\n\r\n            </Formik>\r\n            <div onClick={()=>{changeView(\"/\")}}>log in</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpAdmin;","import React from \"react\";\r\n\r\n/**\r\n * This component renders one row in the admin applications list. Each row shows all relevant information about said application\r\n * @param apiCall a model document containing axios api calls to the express app\r\n * @param item all info about one application ie one row in the list\r\n * @returns {JSX.Element} renders one row in the admin applications list\r\n * @constructor\r\n */\r\nconst ApplicationElement = ({apiCall, item}) => {\r\n\r\n    const updateStatus = (event) => {\r\n        const instance = apiCall.apiAxios();\r\n        instance.post('posts/application', {status: event.target.value, email: item.email})\r\n            .then((response) => {\r\n                console.log(response)\r\n\r\n            }, (error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <tr key={item.id}>\r\n            <td>{item.firstName}</td>\r\n            <td>{item.lastName}</td>\r\n            <td>{item.competence?.map(comp =>{\r\n                return(\r\n                    <div>{comp.name} {comp.year} year(s)</div>\r\n                )\r\n            })}</td>\r\n            <td>{item.startPeriod}</td>\r\n            <td>{item.endPeriod}</td>\r\n            <td>{item.dateOfBirth?.map(comp =>{\r\n                return(\r\n                    <div>{comp.year}-{comp.month}-{comp.day} </div>\r\n                )\r\n            })}</td>\r\n            <td>{item.date}</td>\r\n            <td><select name=\"status\" onChange={(event)=>{ updateStatus(event) }}>\r\n\r\n                {(item.status === \"unhandled\")?\r\n                    <option selected=\"selected\" value=\"unhandled\">unhandled</option>\r\n                :<option value=\"unhandled\">unhandled</option>}\r\n\r\n                {(item.status === \"rejected\")?\r\n                    <option selected=\"selected\" value=\"rejected\">rejected</option>\r\n                    :<option value=\"rejected\">rejected</option>}\r\n\r\n                {(item.status === \"accepted\")?\r\n                    <option selected=\"selected\" value=\"accepted\">accepted</option>\r\n                    :<option value=\"accepted\">accepted</option>}\r\n            </select></td>\r\n        </tr>\r\n    )\r\n\r\n}\r\n\r\nexport default ApplicationElement;","import React from \"react\"\r\nimport ApplicationElement from \"./ApplicationElement\";\r\nimport \"./css/ApplicationList.css\"\r\n\r\n/**\r\n * The admin application list header.\r\n * @param applications an object containing all applications that the page should render in a list\r\n * @returns {JSX.Element} renders a list header and calls the <ApplicationElement/> component to render all rows\r\n */\r\nconst ApplicationList = ({apiCall, applications} ) => {\r\n\r\n    return(\r\n        <table className=\"content-table\">\r\n            <thead>\r\n            <tr>\r\n                <th>fname</th>\r\n                <th>lname</th>\r\n                <th>skills</th>\r\n                <th>startP</th>\r\n                <th>endP</th>\r\n                <th>date of birth</th>\r\n                <th>application made at</th>\r\n                <th>application status</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {applications?.map(item =>{\r\n                return(\r\n                    <ApplicationElement apiCall={apiCall} item={item}/>\r\n                )\r\n            })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default ApplicationList;","import React, {useEffect, useState} from \"react\"\r\nimport { Form, Formik, useField } from \"formik\";\r\nimport {Button, Checkbox, FormControlLabel} from \"@material-ui/core\";\r\nimport ApplicationList from \"./ApplicationList\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\n/**\r\n * Handles the admin page.\r\n * A logged in admin may go through all applications and sort by skills\r\n * The admin can also give a status to an application (accepted, unhandled, rejected)\r\n * @param apiCall model that handles axios api calls to the backend REST API\r\n * @returns {JSX.Element} renders the Admin page showing applications\r\n */\r\nconst AdminApplications = ({apiCall}) => {\r\n    //constants from useState and redux\r\n    const [result, setResult] = useState([])\r\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\r\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\r\n\r\n\r\n    //life cycle methods\r\n    useEffect(() => {\r\n        if ((role !== \"admin\") || (isLoggedIn === false))\r\n            window.location = \"/\"\r\n    }, [isLoggedIn, role])\r\n\r\n\r\n    //custom formik components\r\n    const CustomCheckboxes = ({label, ...props}) => {\r\n        const [field] = useField(props);\r\n        return <FormControlLabel {...field} control={<Checkbox/>} label={label}/>;\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {(role === \"admin\") && (isLoggedIn === true)\r\n                ? <div>\r\n                    <Formik\r\n                        initialValues={{\r\n\r\n                            competences: []\r\n\r\n                        }}\r\n                        onSubmit={(data, {setSubmitting}) => {\r\n                            setSubmitting(true);\r\n                            let param = \"posts\"\r\n                            if (data.competences.length === 2) {\r\n                                param = \"posts/competence/or=\" + data.competences[0] + \"&=\" + data.competences[1];\r\n                            } else if (data.competences.length === 1) {\r\n                                param = \"posts/competence=\" + data.competences[0];\r\n                            }\r\n\r\n                            const instance = apiCall.apiAxios();\r\n                            instance.get(param).then(r =>( setSubmitting(false), setResult(r.data),setResult(r.data)))\r\n                        }}\r\n                    >\r\n                        {({values, isSubmitting, errors}) => (\r\n                            <Form>\r\n                                <CustomCheckboxes name=\"competences\" value=\"A-skills\" type=\"checkbox\" label=\"A-skills\"/>\r\n                                <CustomCheckboxes name=\"competences\" value=\"B-skills\" type=\"checkbox\" label=\"B-skills\"/>\r\n                                <CustomCheckboxes name=\"competences\" value=\"C-skills\" type=\"checkbox\" label=\"C-skills\"/>\r\n                                <CustomCheckboxes name=\"competences\" value=\"D-skills\" type=\"checkbox\" label=\"D-skills\"/>\r\n                                <CustomCheckboxes name=\"competences\" value=\"E-skills\" type=\"checkbox\" label=\"E-skills\"/>\r\n                                <Button disabled={isSubmitting} type=\"submit\">Get Applications</Button>\r\n                                <div>\r\n                                    <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                                    <pre>{JSON.stringify(errors, null, 2)}</pre>\r\n                                </div>\r\n                            </Form>\r\n\r\n                        )}\r\n                    </Formik>\r\n                    {(result.length > 0) ? <ApplicationList apiCall={apiCall} applications={result}/> : \"\"}\r\n                </div>\r\n                : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminApplications;","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signOut} from \"../Model/Redux/Actions/AuthActions\";\r\nimport \"./css/Header.css\";\r\n\r\n/**\r\n * Header component. Renders logo and logout button\r\n * @returns {JSX.Element} returns header, logo and logout button\r\n */\r\nconst Header = () => {\r\n    //constants from redux\r\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"Header-wrapper\">\r\n            <div className=\"logo\">Recruitment Logo Here</div>\r\n            {isLoggedIn\r\n                ? <button className=\"authButton\" onClick={ ()=> dispatch(signOut())  }>Log out</button>\r\n                : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import {Component} from \"react\";\r\nimport './App.css';\r\nimport { Route } from \"react-router-dom\"\r\n\r\n//models\r\nimport ApiCall from './Model/apiCall';\r\nimport Model from './Model/model'\r\n\r\n//presenter\r\nimport {Expertise} from './Views/Expertise'\r\n//views\r\nimport Authentication from \"./Views/Authentication\";\r\nimport SignUpAdmin from \"./Views/SignUpAdmin\";\r\nimport AdminApplications from \"./Views/AdminApplications\";\r\nimport Header from \"./Views/Header\";\r\n\r\n/**\r\n * Main file for the frontend\r\n * Handles initial import of the model and routing of the frontend app\r\n */\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            apiCall: new ApiCall(),\r\n            model: new Model()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"applicationApp\">\r\n                <header className=\"recruitmentApp\">\r\n                    <Header/>\r\n                </header>\r\n                <Route\r\n                    exact path=\"/\"\r\n                    render={() => <Authentication apiCall={this.state.apiCall}/>}\r\n                />\r\n                <Route\r\n                    exact path=\"/admin/signup\"\r\n                    render={() => <SignUpAdmin/>}\r\n                />\r\n                <Route\r\n                    exact path=\"/user/application\"\r\n                    render={() => <Expertise model={this.state.model} apiCall={this.state.apiCall}/>}\r\n                />\r\n                <Route\r\n                    exact path=\"/admin/applications\"\r\n                    render={() => <AdminApplications apiCall={this.state.apiCall}/>}\r\n                />\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initState =\r\n    {\r\n        userInfo: [\r\n            {\r\n                isLoggedIn: false,\r\n                role: null,\r\n                fname: \"\",\r\n                lname: \"\",\r\n                dateOfBirth: \"\",\r\n                email: \"\",\r\n            }\r\n        ]\r\n    }\r\n/**\r\n * A reducer that handles login and signup\r\n * @param state the current state of this reducer\r\n * @param action the action that is to be performed\r\n * @returns {{userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}]}}\r\n */\r\nconst UserReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case \"LOG_IN_USER\":\r\n            return {\r\n\r\n                userInfo: [\r\n                    {\r\n                        isLoggedIn: true,\r\n                        role: action.role,\r\n                        fname: action.fname,\r\n                        lname: action.lname,\r\n                        dateOfBirth: action.dateOfBirth,\r\n                        email: action.email,\r\n                    }\r\n                ]\r\n\r\n            };\r\n        case \"LOG_OUT_USER\":\r\n            return {\r\n\r\n                userInfo: [\r\n                    {\r\n                        isLoggedIn: false,\r\n                        role: null,\r\n                        fname: \"\",\r\n                        lname: \"\",\r\n                        dateOfBirth: \"\",\r\n                        email: \"\",\r\n                    }\r\n                ]\r\n\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport default UserReducer;","import { combineReducers } from \"redux\";\r\nimport UserReducer from \"./UserReducer\";\r\n\r\n/**\r\n * This component combines all reducers in this Redux store\r\n * @type {Reducer<CombinedState<{UserReducer: ({userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}]}|{userInfo: [{fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}]}|{userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: string}]}|{userInfo: [{fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}]})}>>}\r\n */\r\nexport const AllReducers = combineReducers({\r\n    UserReducer\r\n})","import {applyMiddleware, compose, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\nimport { AllReducers } from \"./Reducers\"\r\n\r\n/**\r\n * Config Used to persist the redux store\r\n * @type {{storage, key: string}}\r\n */\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n}\r\n/**\r\n * A persisted combined reducer\r\n * @type {Reducer<CombinedState<{UserReducer: ({userInfo: {fname: (string|*), lname: (string|*), role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}[]}|{userInfo: {fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}[]}|{userInfo: {fname: (string|*), lname: (string|*), role: *, isLoggedIn: boolean, dateOfBirth: *, email: string}[]})}> & PersistPartial, unknown>}\r\n */\r\nconst persistedReducer = persistReducer(persistConfig, AllReducers)\r\n\r\n\r\nexport const ReduxStore = createStore(persistedReducer, applyMiddleware(thunk));\r\nexport const Persistor = persistStore(ReduxStore)\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {ReduxStore, Persistor} from \"./Model/Redux\"\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {PersistGate} from 'redux-persist/integration/react'\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={ReduxStore}>\r\n        <PersistGate loading={null} persistor={Persistor}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </PersistGate>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}