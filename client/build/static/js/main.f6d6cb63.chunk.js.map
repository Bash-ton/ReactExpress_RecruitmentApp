{"version":3,"sources":["Model/apiCall.js","Model/model.js","Views/Expertise.js","Model/Redux/Actions/AuthActions.js","Views/Authentication.js","Views/SignUpAdmin.js","Views/ApplicationElement.js","Views/ApplicationList.js","Views/AdminApplications.js","Views/Header.js","Views/ErrorPages.js","Views/MigrateFromOldDB.js","App.js","reportWebVitals.js","Model/Redux/Reducers/UserReducer.js","Model/Redux/Reducers/index.js","Model/Redux/index.js","ErrorHandler.js","index.js"],"names":["ApiCall","axios","create","baseURL","withCredentials","credentials","headers","model","this","myExpertise","observers","name","filter","exp","notifyObserver","t","y","year","obs","concat","removeObserver","forEach","callback","o","Expertise","apiCall","isLoggedIn","useSelector","state","UserReducer","userInfo","role","email","useState","hasApplication","setHasApplication","history","useHistory","apiAxios","get","then","r","console","log","status","catch","err","response","replace","location","pathname","errorStatusCode","useEffect","window","getAllExpertise","allExpertise","setExpertice","getExpertise","setMyExpertise","addObserver","localStorage","setItem","instance","className","removeExpertise","n","expertise","addExpertise","done","info","post","startPeriod","start","endPeriod","end","dateOfBirth","month","day","firstName","fname","lastName","lname","competence","removeOption","e","removeSelectedExpertise","setApplicationToCompleted","ExpertiseView","map","onClick","AddExpertiseForm","setYear","type","setType","setStart","setEnd","min","placeholder","onChange","event","target","value","k","disabled","comp","el","html","confirm","handleSubmit","signIn","user","dispatch","getState","data","Authentication","authStatus","setAuthStatus","changeAuthStatus","setChangeAuthStatus","useDispatch","isLoading","setLoading","AuthTextField","props","useField","field","meta","errorText","error","touched","TextField","helperText","AuthSchema","Yup","shape","required","password","matches","of","max","visible","color","height","width","initialValues","username","onSubmit","setSubmitting","resetForm","response1","alert","validationSchema","values","isSubmitting","errors","Button","SignUpAdmin","adminKey","as","JSON","stringify","url","ApplicationElement","item","date","updateStatus","selected","id","ApplicationList","applications","AdminApplications","result","setResult","CustomCheckboxes","label","FormControlLabel","control","Checkbox","competences","param","length","Header","loginRole","Page404","to","Page401","Page500","Page501","Page503","MigrateFromOldDB","incompleteUsers","errorMsgInfo","errorMsgInfoApplications","incompleteApplications","completedUsers","completedApplications","compReason","applicationsSentToDB","allEmails","migrationHandler","sqlRow","splitByWord","SQLSTATE","includes","sqlValues","split","order","join","orderOfData","i","val","userID","firstname","lastname","compProfID","competenceID","compYear","availableID","fromDate","toDate","stat","push","dob","substring","parseInt","Object","keys","errorMessage","application","applicationInfo","competenceName","compName","undefined","parseFloat","app","savedUser","skipWriteAgain","files","reader","FileReader","onload","num","str","readAsText","handleFiles","VALUES","App","Model","exact","path","render","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","action","AllReducers","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","ReduxStore","createStore","applyMiddleware","thunk","Persistor","persistStore","ErrorHandler","children","useLocation","ReactDOM","store","loading","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.f6d6cb63.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/**\n * Model that handles all axios HTTP calls to the express API.\n * Contains the base URL to the express API\n */\nexport default class ApiCall {\n    constructor() {\n\n    }\n\n    apiAxios() {\n        return axios.create({\n            baseURL: \"/\",\n            withCredentials: true,\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n    }\n\n\n}\n      ","/**\n * Model that contains all available skills and current skills stored in the frontend\n */\nexport default class model{\n    constructor(){\n        this.myExpertise = [];\n        this.observers = [];\n    }\n    getExpertise(){\n        return this.myExpertise;\n    }\n    removeExpertise(name){\n\t\tthis.myExpertise = [...this.myExpertise.filter((exp) => exp.name !== name)];\n        this.notifyObserver();\n    }\n    addExpertise(t, y){\n        var exp = {name: t, year: y};\n        this.myExpertise = [...this.myExpertise, exp];\n        this.notifyObserver();\n    }\n    getAllExpertise(){\n        const exp = [\"A-skills\", \"B-skills\", \"C-skills\", \"D-skills\", \"E-skills\"];\n        return exp;\n    }\n\n    addObserver(obs){\n        this.observers = this.observers.concat(obs);\n        return () => this.removeObserver(obs);\n    }\n    \n    notifyObserver(){\n        this.observers.forEach(function(callback) {\n            callback();\n        });    \n    }\n    removeObserver(obs) {\n        this.observers = this.observers.filter(o => o !== obs)\n    }\n\n}","import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport \"./css/Header.css\";\nimport { useHistory } from 'react-router-dom';\n\n/**\n * Renders all views related to the client page.\n * @param model a model document used to get available skills and handle all skills in current application in progress before submitting\n * @param apiCall a model document handling all axios calls to the express API\n * @returns {JSX.Element} renders all views on the client page\n */\nfunction Expertise({model, apiCall}) {\n    //constants from redux store\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\n    const email = useSelector(state => state.UserReducer.userInfo[0].email);\n    const [hasApplication, setHasApplication] = useState(false);\n    const history = useHistory();\n\n    //event handler checking if user already has made an application\n    const instance2 = apiCall.apiAxios();\n \n    instance2.get(\"posts/postEmail=\"+email).then(r => (\n        console.log(r.status),\n            console.log(r),\n            setHasApplication(true)\n    )).catch(err => {\n        setHasApplication(false)\n        //Validation error\n        if(err.response.status == 400) console.log(err)\n        //All other errors\n        else{\n            history.replace(history.location.pathname, { \n                errorStatusCode: err.response.status\n            });\n        }\n    })\n\n\n    //lifecycle methods\n    useEffect(() => {\n        if ((role !== \"client\") || (isLoggedIn === false))\n            window.location = \"/\"\n    }, [isLoggedIn, role])\n    useEffect(() => {\n        if ((role !== \"client\") || (isLoggedIn === false))\n            window.location = \"/\"\n    }, [])\n\n    const [allExpertise, setExpertice] = useState(model.getAllExpertise());\n    useEffect(() => setExpertice(model.getAllExpertise()), []);\n\n    const [myExpertise, setMyExpertise] = useState(model.getExpertise());\n    useEffect(function () {\n        return model.addObserver(function () {\n            setMyExpertise(model.getExpertise());\n        })\n    }, [model]);\n\n    //Ta bort: Modellen bestämmer om den vill läsa från localstorage eller inte.......\n    useEffect(() => localStorage.setItem('formData', myExpertise));\n\n    // eventhandlers\n    //remove selected state when chosen?\n    const removeSelectedExpertise = e => {\n        const exp = allExpertise.filter(name => name !== e);\n        setExpertice(exp);\n    }\n    const instance = apiCall.apiAxios();\n\n    return (\n        <div className=\"outer-wrapper\">\n            {((role === \"client\") && (isLoggedIn === true)) ?\n                <div>\n                    {!hasApplication ?\n                        <div>\n                            <ExpertiseView myExpertise={myExpertise} removeExpertise={n => {\n                                model.removeExpertise(n);\n                                setExpertice([...allExpertise, n])\n                            }}/>\n                            <AddExpertiseForm expertise={allExpertise}\n                                              addExpertise={(t, y) => model.addExpertise(t, y)}\n                                              done={(info) => instance.post('posts', {\n                                                  startPeriod: info.start,\n                                                  endPeriod: info.end,\n                                                  dateOfBirth: [{\n                                                      year: info.dateOfBirth.year,\n                                                      month: info.dateOfBirth.month,\n                                                      day: info.dateOfBirth.day\n                                                  }],\n                                                  status: \"unhandled\",\n                                                  firstName: info.fname,\n                                                  lastName: info.lname,\n                                                  competence: myExpertise,\n                                                  email: info.email,\n                                              }).catch(err => {\n                                                  //Validation error\n                                                if(err.response.status == 400) console.log(err)\n                                                //All other errors\n                                                else{\n                                                    history.replace(history.location.pathname, { \n                                                        errorStatusCode: err.response.status\n                                                    });\n                                                }\n                                              })}\n                                              removeOption={(name) => removeSelectedExpertise(name)}\n                                              setApplicationToCompleted = {() => setHasApplication(!hasApplication)}\n                                              myExpertise={myExpertise}\n                            /></div>\n                        : <div>You have already made an application. Please wait for us to give you a response</div>}\n                </div> : \"\"}\n        </div>\n    )\n}\n\n/**\n * This component renders the current skills in progress before submitting it\n * @param myExpertise object that contains all skills currently in the application\n * @param removeExpertise method used to remove skills from application\n * @returns {JSX.Element} renders a list of current skills in application\n */\nconst ExpertiseView = ({myExpertise, removeExpertise}) => (\n    <div>\n        {myExpertise.map(e =>\n            <tbody>\n            <tr key={e.name + e.year}>\n                <td>{e.name}</td>\n                <td>{e.year}</td>\n            </tr>\n            <button onClick={() => removeExpertise(e.name)}>remove</button>\n            </tbody>\n        )}\n    </div>\n);\n\n\n/**\n * A form that lets user input all relevant information used to create an application\n * @param expertise all currently available skills to choose from in the application\n * @param addExpertise method used to add a skill to the application\n * @param done method used so submit the application\n * @param removeOption method that removes one available skill from the {expertise} object when that skill already has been added to the form\n * @returns {JSX.Element} render the form to input skills to the application\n */\n const AddExpertiseForm = ({expertise, addExpertise, done, removeOption, setApplicationToCompleted, myExpertise}) => {\n\n    const userInfo = useSelector(state => state.UserReducer.userInfo)\n    console.log(userInfo)\n    const handleSubmit = () => {\n        let comp = '';\n        myExpertise.forEach(el => {\n            comp += \"Competence: \" + el.name + \" ,Years: \" + el.year + \"\\n\";\n        });\n        \n        let str1 = \"Application\";\n        let html = str1.concat(\"\\n\", \"First name: \" + userInfo[0].fname)\n        .concat(\"\\n\", \"Last name: \" + userInfo[0].lname)\n        .concat(\"\\n\", \"Date of birth: \" + userInfo[0].dateOfBirth.year +  \"-\" + userInfo[0].dateOfBirth.month + \"-\" + userInfo[0].dateOfBirth.day)\n        .concat(\"\\n\", \"Email: \" + userInfo[0].email)\n        .concat(\"\\n\", \"Start period: \" + start)\n        .concat(\"\\n\",  \"End period: \" + end)\n        .concat(\"\\n\", comp)\n        .concat(\"\\n\", \"Are you sure you want to submit your application?\");\n\n        let ans = window.confirm(html);\n        if (ans === true) {\n            done({\n                start: start,\n                end: end,\n                fname: userInfo[0].fname,\n                lname: userInfo[0].lname,\n                status: \"unhandled\",\n                dateOfBirth: userInfo[0].dateOfBirth,\n                email: userInfo[0].email\n            });\n            setApplicationToCompleted();\n        }\n    }\n\n    const [year, setYear] = useState(0);\n    const [type, setType] = useState('');\n    const [start, setStart] = useState(\"\");\n    const [end, setEnd] = useState(\"\");\n    return (\n        <div>\n            <input type=\"number\" min=\"0\" placeholder=\"years of experience\"\n                   onChange={(event) => setYear(event.target.value)}/>\n            <select onChange={(event) => setType(event.target.value)}>\n                <option>choose your expertise</option>\n                {expertise.map((k) => <option key={k}>{k}</option>)}\n            </select>\n            <button disabled={type === ''} onClick={() => {\n                addExpertise(type, year);\n                removeOption(type);\n                setType('');\n            }}>add skill to application\n            </button>\n\n            <div>\n                <br/>\n                <input type=\"text\" min=\"0\" placeholder=\"available start period\" onChange={(event) => {\n                    setStart(event.target.value)\n                }}/>\n                <input type=\"text\" min=\"0\" placeholder=\"available end period\" onChange={(event) => {\n                    setEnd(event.target.value)\n                }}/>\n                <button onClick={() => {\n                    handleSubmit();\n                }}>confirm and send application\n                </button>\n            </div>\n\n\n        </div>\n    );\n};\n\nexport {Expertise}; \n","/**\n * Redux action for signup\n * @param user object containing user information\n * @returns {function(*, *): void} a dispatch call to {UserReducer}\n */\nexport const signIn = (user) => {\n    return (dispatch, getState) => {\n        dispatch({type:\"LOG_IN_USER\", role:user.data.role, fname:user.data.firstName, lname: user.data.lastName, dateOfBirth: user.data.dateOfBirth, email: user.data.email})\n    }\n}\n\n/**\n * Redux action that sing out a user\n * @returns {function(*, *): void} a dispatch call to {UserReducer}\n */\nexport const signOut = () => {\n    return (dispatch, getState) => {\n        dispatch({type:\"LOG_OUT_USER\"})\n    }\n}","import React, {useEffect, useState} from 'react'\nimport {Form, Formik, useField} from \"formik\";\nimport {TextField, Button, Select, MenuItem} from \"@material-ui/core\";\nimport * as Yup from \"yup\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {signIn} from \"../Model/Redux/Actions/AuthActions\";\nimport \"./css/login-signup.css\";\nimport Loader from \"react-loader-spinner\";\nimport { useHistory } from 'react-router-dom';\n\n\n//TODO remove the <Pre-tags> when done testing\n\n/**\n * This is the authentication page that handles login and signup including validation.\n * @param apiCall a model document containingn axios calls to the express rest API\n * @returns {JSX.Element} renders login and signup form\n */\nconst Authentication = ({apiCall}) => {\n\n    //constants from useState and redux\n    const [authStatus, setAuthStatus] = useState(\"Sign up\");\n    const [changeAuthStatus, setChangeAuthStatus] = useState(\"Login\");\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\n    const dispatch = useDispatch();\n    const [isLoading, setLoading] = useState(false);\n    const history = useHistory();\n\n\n    //life cycle methods\n    useEffect(() => {\n        if (role === \"client\") {\n            window.location = \"/user/application\";\n\n        } else if (role === \"admin\") {\n            window.location = \"/admin/applications\";\n\n        }\n    }, [isLoggedIn])\n\n\n\n    //custom formik components\n    const AuthTextField = ({\n                               placeholder,\n                               ...props\n                           }) => {\n        const [field, meta] = useField(props);\n        const errorText = meta.error && meta.touched ? meta.error : \"\";\n        return (\n            <TextField\n                placeholder={placeholder}\n                {...field}\n                helperText={errorText}\n                error={!!errorText}//casting string to boolean\n                type={props.type}\n            />\n        )\n    }\n    //yup schema for validation\n    const AuthSchema = Yup.object().shape({\n        email: Yup.string()\n            .min(4, 'Too Short!')\n            .required('Required')\n            .email('Invalid email'),\n        password: Yup.string()\n            .min(4, 'Too Short!')\n            .required('Required'),\n        firstName: (authStatus === \"Login\")\n            ? Yup.string()\n            : Yup.string()\n                .required('Required')\n                .matches(/^(?=.)[a-ö]*$/, \"must not contain numbers\"),\n        lastName: (authStatus === \"Login\")\n            ? Yup.string()\n            : Yup.string()\n                .required('Required')\n                .matches(/^(?=.)[a-ö]*$/, \"must not not contain numbers\"),\n        dateOfBirth: Yup.array()\n            .of(\n                Yup.object().shape({\n                    year: (authStatus === \"Login\")\n                        ? Yup.number()\n                        : Yup.number().required('Required'),\n                    month: (authStatus === \"Login\")\n                        ? Yup.number()\n                        : (Yup.number()\n                            .min(1, \"must be between 1 and 12\")\n                            .max(12, \"must be between 1 and 31\")\n                            .required('Required')),\n                    day: (authStatus === \"Login\")\n                        ? Yup.number()\n                        : Yup.number()\n                            .min(1, \"must be between 1 and 31\")\n                            .max(31, \"must be between 1 and 31\")\n                            .required('Required'),\n                })\n            )\n    })\n\n    //event handlers\n    const handleAuthStatusChange = () => {\n        if (authStatus === \"Login\") {\n            setAuthStatus(\"Sign up\")\n            setChangeAuthStatus(\"Login\")\n        } else {\n            setAuthStatus(\"Login\")\n            setChangeAuthStatus(\"Sign up\")\n        }\n    }\n\n    return (\n        <div className=\"outer-wrapper\">\n            {isLoading? <Loader visible={isLoading} type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80}/>:\n            <div>\n                {!isLoggedIn\n                    ? <div className=\"inner-wrapper\" >\n                        <Formik\n                            initialValues={{\n                                username: \"\",\n                                email: \"\",\n                                password: \"\",\n                                firstName: \"\",\n                                lastName: \"\",\n                                dateOfBirth: [{year: \"\", month: \"\", day: \"\"}]\n                            }}\n                            onSubmit={(data, {setSubmitting, resetForm}) => {\n                                setSubmitting(true);\n                                resetForm();\n                                setLoading(isLoading => !isLoading);\n\n                                if (authStatus === \"Sign up\") {\n                                    const instance = apiCall.apiAxios();\n\n                                    instance.post('auth/register', {data})\n                                        .then((response) => {\n\n                                            const instance = apiCall.apiAxios();\n                                            instance.post('auth/login', {email: data.email, password: data.password})\n                                                .then((response1) => {\n                                                    dispatch(signIn(response1))\n                                                }, (error) => {\n                                                    setLoading(isLoading => !isLoading);\n                                                    //Validation error\n                                                    if(error.response.status == 400) alert(\"Wrong email and/or password\");\n                                                    //All other errors\n                                                    else{\n                                                        history.replace(history.location.pathname, { \n                                                            errorStatusCode: error.response.status\n                                                        });\n                                                    }\n                                                });\n\n                                        }, (err) => {\n                                            setLoading(isLoading => !isLoading);\n                                            //Validation error\n                                            if(err.response.status == 400) alert(\"email already in use\");\n                                            //All other errors\n                                            else{\n                                                history.replace(history.location.pathname, { \n                                                    errorStatusCode: err.response.status\n                                                });\n                                            }\n                                        });\n                                } else {\n                                    const instance = apiCall.apiAxios();\n                                    instance.post('auth/login', {email: data.email, password: data.password})\n                                        .then((response1) => {\n                                            setLoading(isLoading => !isLoading);\n                                            dispatch(signIn(response1))\n\n                                        }, (error) => {\n                                            setLoading(isLoading => !isLoading);\n                                            //Validation error\n                                            if(error.response.status == 400) alert(\"Wrong email and/or password\");\n                                            //All other errors\n                                            else{\n                                                history.replace(history.location.pathname, { \n                                                    errorStatusCode: error.response.status\n                                                });\n                                            }\n                                        });\n                                }\n                                setSubmitting(false);\n                            }}\n                            validationSchema={AuthSchema}\n                        >\n                            {({values, isSubmitting, resetForm, errors}) => (\n                                \n                        \n                                <Form >\n                                    {(authStatus === \"Sign up\") ? <div>\n                                    <p>Create an account</p>\n                                    </div> : <div>Log in</div>}\n                                    <div>\n                                        <AuthTextField\n                                            placeholder=\"Email\"\n                                            name=\"email\"\n                                            type=\"input\"\n                                        />\n                                    </div>\n                                    <div>\n                                        <AuthTextField\n                                            placeholder=\"Password\"\n                                            name=\"password\"\n                                            type=\"password\"\n                                        />\n                                    </div>\n                                    {(authStatus === \"Sign up\") ? <div>\n                                        <AuthTextField\n                                            placeholder=\"Username\"\n                                            name=\"username\"\n                                            type=\"input\"\n                                        />\n                                    </div> : \"\"}\n                                    {(authStatus === \"Sign up\") ? <div>\n                                        <AuthTextField\n                                            placeholder=\"First Name\"\n                                            name=\"firstName\"\n                                            type=\"input\"\n                                        />\n                                    </div> : \"\"}\n                                    {(authStatus === \"Sign up\") ? <div>\n                                        <AuthTextField\n                                            placeholder=\"Last Name\"\n                                            name=\"lastName\"\n                                            type=\"input\"\n                                        />\n                                    </div> : \"\"}<br/>\n                                    {(authStatus === \"Sign up\") ? <div>\n                                        <AuthTextField\n                                            placeholder=\"Year\"\n                                            name=\"dateOfBirth[0].year\"\n                                            type=\"number\"\n                                        /><br/>\n                                        <AuthTextField\n                                            placeholder=\"Month\"\n                                            name=\"dateOfBirth[0].month\"\n                                            type=\"number\"\n                                        /><br/>\n                                        <AuthTextField\n                                            placeholder=\"Day\"\n                                            name=\"dateOfBirth[0].day\"\n                                            type=\"number\"\n                                        />\n                                    </div> : \"\"}\n                                    <div>\n                                        <Button disabled={isSubmitting} type=\"submit\">{authStatus}</Button>\n                                    </div>\n                                    \n\n\n\n\n                                    <div onClick={() => {\n                                        handleAuthStatusChange();\n                                        resetForm()\n                                    }}>{changeAuthStatus}</div>\n                                </Form>\n                            )}\n                        </Formik>\n\n\n                    </div>\n                    : \"\"}\n            </div>}\n        </div>\n    )\n}\n\n/** DELETE IF NO USE, USED FOR TESTING FORM INPUTS\n *  <pre>{JSON.stringify(errors, null, 2)}</pre>\n *  <pre>{JSON.stringify(values, null, 2)}</pre>\n */\nexport default Authentication;","import React from 'react'\nimport {Field, Form, Formik} from \"formik\";\nimport { TextField, Button } from \"@material-ui/core\";\n\n//TODO not used remove this later\nconst SignUpAdmin = () =>{\n\n    //event handlers\n    const changeView = (url) => {\n        window.location =  url\n    }\n    return (\n        <div className=\"wrapper\">\n            <Formik\n                initialValues={{ email: \"\", password: \"\", adminKey: \"\"}}\n                onSubmit={( data, { setSubmitting , resetForm}) =>{\n                    setSubmitting(true);\n                    resetForm();\n                    //make async calls here to auth\n                    console.log(\"submit:\", data);\n                    setSubmitting(false);\n                } }\n            >\n                {({  values, isSubmitting  })  => (\n                    <div >\n                    <Form >\n                        <div >\n                        <Field\n                            placeholder=\"Email\"\n                            name=\"email\"\n                            type=\"input\"\n                            as={TextField}\n                        />\n                        </div>\n                        <div>\n                            <Field\n                                placeholder=\"Password\"\n                                name=\"password\"\n                                type=\"password\"\n                                as={TextField}\n                            />\n                        </div>\n                        <div>\n                            <Field\n                                placeholder=\"Key\"\n                                name=\"adminKey\"\n                                type=\"password\"\n                                as={TextField}\n                            />\n                        </div>\n                        <div>\n                            <Button disabled={isSubmitting} type=\"submit\">Sign up</Button>\n                        </div>\n                        <pre>{JSON.stringify(values, null, 2)}</pre>\n\n                    </Form>\n                    </div>\n                )}\n\n\n            </Formik>\n            <div onClick={()=>{changeView(\"/\")}}>log in</div>\n\n        </div>\n    )\n}\n\nexport default SignUpAdmin;","import React from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n/**\n * This component renders one row in the admin applications list. Each row shows all relevant information about said application\n * @param apiCall a model document containing axios api calls to the express app\n * @param item all info about one application ie one row in the list\n * @returns {JSX.Element} renders one row in the admin applications list\n * @constructor\n */\nconst ApplicationElement = ({apiCall, item}) => {\n    const history = useHistory();\n    const updateStatus = (event) => {\n        const instance = apiCall.apiAxios();\n        instance.post('posts/application', {status: event.target.value, email: item.email})\n            .then((response) => {\n                console.log(response)\n\n            }, (err) => {\n                //Validation error\n                if(err.response.status == 400) console.log(\"Email is incorrect\");\n                //All other errors\n                else{\n                    history.replace(history.location.pathname, { \n                        errorStatusCode: err.response.status\n                    });\n                }\n            });\n    }\n\n\n    return (\n        <tr key={item.id}>\n            <td>{item.firstName}</td>\n            <td>{item.lastName}</td>\n            <td>{item.competence?.map(comp =>{\n                return(\n                    <div>{comp.name} {comp.year} year(s)</div>\n                )\n            })}</td>\n            <td>{item.startPeriod}</td>\n            <td>{item.endPeriod}</td>\n            <td>{item.dateOfBirth?.map(comp =>{\n                return(\n                    <div>{comp.year}-{comp.month}-{comp.day} </div>\n                )\n            })}</td>\n            <td>{item.date}</td>\n            <td><select name=\"status\" onChange={(event)=>{ updateStatus(event) }}>\n\n                {(item.status === \"unhandled\")?\n                    <option selected=\"selected\" value=\"unhandled\">unhandled</option>\n                :<option value=\"unhandled\">unhandled</option>}\n\n                {(item.status === \"rejected\")?\n                    <option selected=\"selected\" value=\"rejected\">rejected</option>\n                    :<option value=\"rejected\">rejected</option>}\n\n                {(item.status === \"accepted\")?\n                    <option selected=\"selected\" value=\"accepted\">accepted</option>\n                    :<option value=\"accepted\">accepted</option>}\n            </select></td>\n        </tr>\n    )\n\n}\n\nexport default ApplicationElement;","import React from \"react\"\nimport ApplicationElement from \"./ApplicationElement\";\nimport \"./css/ApplicationList.css\"\n\n/**\n * The admin application list header.\n * @param applications an object containing all applications that the page should render in a list\n * @returns {JSX.Element} renders a list header and calls the <ApplicationElement/> component to render all rows\n */\nconst ApplicationList = ({apiCall, applications} ) => {\n\n    return(\n        <table className=\"content-table\">\n            <thead>\n            <tr>\n                <th>fname</th>\n                <th>lname</th>\n                <th>skills</th>\n                <th>startP</th>\n                <th>endP</th>\n                <th>date of birth</th>\n                <th>application made at</th>\n                <th>application status</th>\n            </tr>\n            </thead>\n            <tbody>\n            {applications?.map(item =>{\n                return(\n                    <ApplicationElement apiCall={apiCall} item={item}/>\n                )\n            })}\n            </tbody>\n        </table>\n    )\n}\n\nexport default ApplicationList;","import React, {useEffect, useState} from \"react\"\nimport { Form, Formik, useField } from \"formik\";\nimport {Button, Checkbox, FormControlLabel} from \"@material-ui/core\";\nimport ApplicationList from \"./ApplicationList\";\nimport {useSelector} from \"react-redux\";\nimport Loader from \"react-loader-spinner\";\nimport { useHistory } from 'react-router-dom';\nimport \"./css/Header.css\";\n/**\n * Handles the admin page.\n * A logged in admin may go through all applications and sort by skills\n * The admin can also give a status to an application (accepted, unhandled, rejected)\n * @param apiCall model that handles axios api calls to the backend REST API\n * @returns {JSX.Element} renders the Admin page showing applications\n */\nconst AdminApplications = ({apiCall}) => {\n    //constants from useState and redux\n    const [result, setResult] = useState([])\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\n    const history = useHistory();\n    const [isLoading, setLoading] = useState(false);\n\n\n    //life cycle methods\n    useEffect(() => {\n        if ((role !== \"admin\") || (isLoggedIn === false))\n            window.location = \"/\"\n    }, [isLoggedIn, role])\n\n\n    //custom formik components\n    const CustomCheckboxes = ({label, ...props}) => {\n        const [field] = useField(props);\n        return <FormControlLabel {...field} control={<Checkbox/>} label={label}/>;\n    }\n\n\n    return (\n    <div className=\"outer-wrapper\">\n        {isLoading? <Loader visible={isLoading} type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80}/>:\n        <div >\n            {(role === \"admin\") && (isLoggedIn === true)\n                ? <div  >\n                    <Formik\n                        initialValues={{\n\n                            competences: []\n\n                        }}\n                        onSubmit={(data, {setSubmitting}) => {\n                            setSubmitting(true);\n                            let param = \"posts\"\n                             if (data.competences.length === 1) {\n                                param = \"posts/competence=\" + data.competences[0];\n                            }\n                            else if (data.competences.length === 2) {\n                                param = \"posts/competence=\" + data.competences[0] + \"&=\" + data.competences[1];\n                              \n                            } \n                            else if (data.competences.length === 3) {\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2];\n                            }\n                            else if (data.competences.length === 4) {\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2]+ \"&=\" + data.competences[3];\n                            }\n                            else if (data.competences.length === 5) {\n                                param = \"posts/competence=\" + data.competences[0]+ \"&=\" + data.competences[1]+ \"&=\" + data.competences[2]+ \"&=\" + data.competences[3]+ \"&=\" + data.competences[4];\n                            }\n                              console.log(param)\n\n                            const instance = apiCall.apiAxios();\n                            instance.get(param).then(r =>( setSubmitting(false), setResult(r.data),setResult(r.data)))\n                            .catch(err => {\n                                setLoading(isLoading => !isLoading);\n                                //Validation error\n                                if(err.response.status == 400) console.log(err);\n                                //All other errors\n                                else{\n                                    history.replace(history.location.pathname, { \n                                        errorStatusCode: err.response.status\n                                    });\n                                }\n                            })\n                        }}\n                    >\n                        {({values, isSubmitting, errors}) => (\n                            <Form>\n                                <CustomCheckboxes name=\"competences\" value=\"A-skills\" type=\"checkbox\" label=\"A-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"B-skills\" type=\"checkbox\" label=\"B-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"C-skills\" type=\"checkbox\" label=\"C-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"D-skills\" type=\"checkbox\" label=\"D-skills\"/>\n                                <CustomCheckboxes name=\"competences\" value=\"E-skills\" type=\"checkbox\" label=\"E-skills\"/>\n                                <Button disabled={isSubmitting} type=\"submit\">Get Applications</Button>\n                            </Form>\n\n                        )}\n                    </Formik>\n                    {(result.length > 0) ? <ApplicationList apiCall={apiCall} applications={result}/> : \"\"}\n                </div>\n                : \"\"}\n        </div>}</div>\n    )\n}\n\nexport default AdminApplications;","import React, {useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {signOut} from \"../Model/Redux/Actions/AuthActions\";\nimport \"./css/Header.css\";\n\n/**\n * Header component. Renders logo and logout button\n * @returns {JSX.Element} returns header, logo and logout button\n */\nconst Header = () => {\n    //constants from redux\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const loginRole = useSelector(state => state.UserReducer.userInfo[0].role);\n    const dispatch = useDispatch();\n\n\n    return (\n        <div className=\"Header-wrapper\">\n            <div className=\"logo\">Recruitment Logo Here</div>\n            {isLoggedIn\n                ? <button className=\"authButton\" onClick={ ()=> dispatch(signOut())  }>Log out</button>\n                : \"\"}\n            {loginRole === \"admin\"\n                ? <button className=\"migrateButton\" onClick={ ()=> { window.location = \"/admin/Migrate\" }  }>Migrate from old DB</button>\n                : \"\"}\n            {loginRole === \"admin\"\n                ? <button className=\"migrateButton\" onClick={ ()=> { window.location = \"/admin/applications\" }  }>Handle Applications</button>\n                : \"\"}\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {signOut} from \"../Model/Redux/Actions/AuthActions\";\nimport \"./css/Header.css\";\n/**\n * View presented when API error occurs.\n * @returns {JSX} graphical view \n */\nexport const Page404 = () => (\n    <div className=\"error\">\n        <h1>404 Error</h1>\n        <p>The requested URL was not found on this server.</p>\n        <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\n    </div>\n);\n/**\n * View presented when API error occurs.\n * 401 error occurs when a client authentication has expired or API error were current authentication session is lost. \n * Client is logged-out of main app and navigated to log-in view. \n * @returns {JSX} graphical view \n */\nexport const Page401 = () => {\n    const dispatch = useDispatch();\n    return (\n        <div className=\"error\">\n            <h1>401 Error</h1>\n            <p>Unauthorized access.</p>\n            <Link to=\"/\"><button type=\"button\" onClick={()=> dispatch(signOut())}>back to main app</button></Link>\n        </div>\n    );\n};\n/**\n * View presented when API error occurs.\n * @returns {JSX} graphical view \n */\nexport const Page500 = () => (\n    <div className=\"error\">\n        <h1>500 Error</h1>\n        <p>Server encountered a internal error and cannot handle the request.</p>\n        <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\n    </div>\n);\n/**\n * View presented when API error occurs.\n * @returns {JSX} graphical view \n */\nexport const Page501 = () => (\n    <div className=\"error\">\n        <h1>501 Error</h1>\n        <p>Server encountered a error and currently cannot handle the request.</p> \n        <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\n    </div>\n);\n/**\n * View presented when API error occurs.\n * @returns {JSX} graphical view \n */\nexport const Page503 = () => (\n    <div className=\"error\">\n        <h1>503 Error</h1>\n        <p>Server encountered a error and currently cannot handle the request.</p> \n        <Link to=\"/\"><button type=\"button\">back to main app</button></Link>\n    </div>\n);\n\n","import React, {useEffect, useState}  from 'react'\nimport {Field, Form, Formik} from \"formik\";\nimport {TextField, Button} from \"@material-ui/core\";\nimport {useSelector} from \"react-redux\";\n\nconst MigrateFromOldDB = ({apiCall}) => {\n\n    //life cycle methods\n    useEffect(() => {\n        if ((role !== \"admin\") || (isLoggedIn === false))\n            window.location = \"/\"\n    }, [isLoggedIn, role])\n\n    \n    //constants from useState and redux\n    const isLoggedIn = useSelector(state => state.UserReducer.userInfo[0].isLoggedIn);\n    const role = useSelector(state => state.UserReducer.userInfo[0].role);\n\n     //life cycle methods\n     useEffect(() => {\n        if ((role !== \"admin\") || (isLoggedIn === false))\n            window.location = \"/\"\n    }, [isLoggedIn, role])\n\n    let incompleteUsers = [];\n    let errorMsgInfo = [];\n    let errorMsgInfoApplications = [];\n    let incompleteApplications = [];\n    let completedUsers = [];\n    let completedApplications = [];\n    let compReason = \"\";\n    let applicationsSentToDB = [];\n    let allEmails = [];\n\n    const handleFiles = (files) => {\n\n        var reader = new FileReader();\n        reader.onload = (e) => {\n\n            let num = 1;\n            let str = reader.result.split(\";\")[0];\n            while (typeof str == \"string\") {\n\n                if (str.includes(\"person\") || str.includes(\"competence_profile\") || str.includes(\"availability\")) {\n                    migrationHandler(str)\n                }\n                str = reader.result.split(\";\")[num++];\n            }\n\n        }\n        reader.readAsText(files[0]);\n    }\n\n    const migrationHandler = (sqlRow) => {\n        let splitByWord = \"\";\n        let SQLSTATE = \"\";\n        console.log(sqlRow)\n        if (sqlRow.includes(\"INSERT INTO person\") || sqlRow.includes('INSERT INTO \"person\"')) {\n            SQLSTATE = \"MIGRATE_USER\"\n            splitByWord = \"person\";\n        } else if (sqlRow.includes(\"INSERT INTO competence_profile\") || sqlRow.includes('INSERT INTO \"competence_profile\"')) {\n            SQLSTATE = \"MIGRATE_APPLICATION\"\n            splitByWord = \"competence_profile\";\n        } else {\n            SQLSTATE = \"MIGRATE_APPLICATION\"\n            splitByWord = \"availability\";\n        }\n        let sqlValues = sqlRow.split(\"VALUES\");\n        console.log(sqlValues)\n\n        //get the order of the inputs\n        let order = sqlValues[0].split(\"\\\\\").join(\"\");\n        order = order.split(splitByWord).join(\"\");\n        order = order.split(\"INSERT INTO\");\n        order = order[1].split(\"(\").join(\"\");\n        order = order.split(\"↵\").join(\"\");\n        order = order.split(\")\").join(\"\");\n        order = order.split('\"').join(\"\");\n        order = order.split(\"’\").join(\"\");\n        console.log(order.split(\"’\").join(\"\"))\n        order = order.split(\" \").join(\"\");\n        order = order.split(\";\").join(\"\");\n        order = order.split(\",\");\n        console.log(order)\n\n\n        //get the inputs\n        sqlValues = sqlValues[1].split(\"\\\\\").join(\"\");\n        sqlValues = sqlValues.split(\"(\").join(\"\");\n        sqlValues = sqlValues.split(\")\").join(\"\");\n        sqlValues = sqlValues.split(\"↵\").join(\"\");\n        sqlValues = sqlValues.split('\"').join(\"\");\n        sqlValues = sqlValues.split(\"’\").join(\"\");\n        sqlValues = sqlValues.split(\"'\").join(\"\");\n        sqlValues = sqlValues.split(\";\").join(\"\");\n        console.log(sqlValues)\n        let newData = sqlValues.split(\" \").join(\"\");\n        let split = newData.split(\",\");\n        console.log(split.length)\n\n\n        //save order of inputs that exists\n        let orderOfData = {}\n        let i = 0;\n\n\n        if (splitByWord === \"person\") {\n            order.forEach((val) => {\n                if (val === \"_id\" && (split[i] !== \"NULL\")) {\n                    orderOfData.userID = i;\n                } else if (val === \"name\" && (split[i] !== \"NULL\")) {\n                    orderOfData.firstname = i;\n                } else if (val === \"surname\" && (split[i] !== \"NULL\")) {\n                    orderOfData.lastname = i;\n                } else if (val === \"ssn\" && (split[i] !== \"NULL\")) {\n                    orderOfData.dateOfBirth = i;\n                } else if (val === \"email\" && (split[i] !== \"NULL\")) {\n                    orderOfData.email = i;\n                } else if (val === \"password\" && (split[i] !== \"NULL\")) {\n                    orderOfData.password = i;\n                } else if (val === \"role_id\" && (split[i] !== \"NULL\")) {\n                    orderOfData.role = i;\n                } else if (val === \"username\" && (split[i] !== \"NULL\")) {\n                    orderOfData.username = i;\n                }\n                i++;\n            })\n        } else if (splitByWord === \"competence_profile\") {\n            order.forEach((val) => {\n                if (val === \"_id\" && (split[i] !== \"NULL\")) {//competence_profile_id\n                    orderOfData.compProfID = i;\n                } else if (val === \"person_id\" && (split[i] !== \"NULL\")) {\n                    orderOfData.userID = i;\n                } else if (val === \"competence_id\" && (split[i] !== \"NULL\")) {\n                    orderOfData.competenceID = i;\n                } else if (val === \"years_of_experience\" && (split[i] !== \"NULL\")) {\n                    orderOfData.compYear = i;\n                }\n                i++;\n            })\n\n        } else {//availability\n            order.forEach((val) => {\n                if (val === \"_id\" && (split[i] !== \"NULL\")) {//availability_id\n                    orderOfData.availableID = i;\n                } else if (val === \"person_id\" && (split[i] !== \"NULL\")) {\n                    orderOfData.userID = i;\n                } else if (val === \"from_date\" && (split[i] !== \"NULL\")) {\n                    orderOfData.fromDate = i;\n                } else if (val === \"to_date\" && (split[i] !== \"NULL\")) {\n                    orderOfData.toDate = i;\n                }\n                i++;\n            })\n        }\n\n\n        console.log(orderOfData)\n\n\n        //handle migrate user\n        if (SQLSTATE === \"MIGRATE_USER\") {//if sql is INSERT INTO \"person\"\n            console.log(split)\n\n\n            //check for stored info -> add info -> is enough -> API, remove errormsg\n            //else store info in array, update errormsg\n            let userInfo = {};\n            incompleteUsers.forEach((user) => {\n                if (user.userID === split[orderOfData.userID]) {//found information\n                    console.log(user)\n                    userInfo = user\n\n\n                }\n\n            })\n\n\n            console.log(orderOfData)\n            console.log(orderOfData.email);\n            console.log(split[orderOfData.firstname]);\n            if (orderOfData.username >= 0) {\n                userInfo.username = split[orderOfData.username]\n            }\n            if (orderOfData.email >= 0) {\n                userInfo.email = split[orderOfData.email]\n\n                let stat = false;\n                allEmails.forEach((val) => {\n                    if (val.userID === split[orderOfData.userID]) {\n                        stat = true;\n                    }\n                })\n                if (stat === false) {\n                    allEmails.push({userID: split[orderOfData.userID], email: split[orderOfData.email]})\n                } else {\n                    stat = false;\n                }\n            }\n            if (orderOfData.password >= 0) {\n                userInfo.password = split[orderOfData.password]\n            }\n            if (orderOfData.firstname >= 0) {\n                userInfo.firstName = split[orderOfData.firstname]\n            }\n            if (orderOfData.lastname >= 0) {\n                userInfo.lastName = split[orderOfData.lastname]\n            }\n            if (orderOfData.dateOfBirth >= 0) {\n                userInfo.dateOfBirth = split[orderOfData.dateOfBirth]\n                let dob = split[orderOfData.dateOfBirth].split(\"-\").join(\"\");\n                let year = dob.substring(0, 4);\n                let month = dob.substring(4, 6);\n                let day = dob.substring(6, 8);\n                userInfo.dateOfBirth =\n                    [\n                        {\n                            \"year\": parseInt(year),\n                            \"month\": parseInt(month),\n                            \"day\": parseInt(day)\n                        }\n                    ]\n            }\n            if (orderOfData.role >= 0) {\n                let role;\n                if (parseInt(split[orderOfData.role]) === 1) {\n                    role = \"admin\";\n                } else {\n                    role = \"client\";\n                }\n                userInfo.role = role;\n            }\n            console.log(userInfo)\n\n            userInfo.userID = split[orderOfData.userID]\n            console.log(split[orderOfData.userID])\n\n            console.log(Object.keys(userInfo).length)\n            if (Object.keys(userInfo).length < 8) {\n                incompleteUsers.push(userInfo)\n\n                let errorMessage = \"The following attributes are missing to be able to migrate this user to the new system:\";\n                if (!userInfo.email) {\n                    errorMessage = errorMessage + \" email,\"\n                }\n                if (!userInfo.username) {\n                    errorMessage = errorMessage + \" username,\"\n                }\n                if (!userInfo.password) {\n                    errorMessage = errorMessage + \" password,\"\n                }\n                if (!userInfo.firstName) {\n                    errorMessage = errorMessage + \" firstName,\"\n                }\n                if (!userInfo.lastName) {\n                    errorMessage = errorMessage + \" lastName,\"\n                }\n                if (!userInfo.dateOfBirth) {\n                    errorMessage = errorMessage + \" dateOfBirth/ssn,\"\n                }\n                errorMsgInfo = errorMsgInfo.filter((value) => {\n                    return value.userID !== split[orderOfData.userID];\n                })\n                errorMsgInfo.push({\n                    \"userID\": split[orderOfData.userID],\n                    \"msg\": errorMessage\n                })\n                console.log(userInfo)\n                console.log(incompleteUsers)\n            } else {\n                console.log(\"DONE\")\n                errorMsgInfo = errorMsgInfo.filter((value) => {\n                    return value.userID !== split[orderOfData.userID];\n                })\n                //call api\n\n                console.log(userInfo)\n                completedUsers.push(userInfo)\n\n\n                const instance = apiCall.apiAxios();\n\n                instance.post('auth/register', {\n                    \"data\": {\n                        \"username\": userInfo.username,\n                        \"email\": userInfo.email,\n                        \"password\": userInfo.password,\n                        \"firstName\": userInfo.firstName,\n                        \"lastName\": userInfo.lastName,\n                        \"dateOfBirth\": userInfo.dateOfBirth,\n                        \"role\": userInfo.role\n\n                    }\n\n                })\n                    .then((response) => {\n                        alert(\"migration of user was successfull!\")\n                        let done = false;\n                        completedApplications.forEach((application) => {\n                            if (application.userID === split[orderOfData.userID] && done === false) {//found information\n                                console.log(application)\n                                console.log(userInfo)\n\n                                //make API call to applications\n                                const instance = apiCall.apiAxios();\n                                instance.post('posts', {\n                                    startPeriod: application.fromDate,\n                                    endPeriod: application.toDate,\n                                    dateOfBirth: userInfo.dateOfBirth,\n                                    status: \"unhandled\",\n                                    firstName: userInfo.firstName,\n                                    lastName: userInfo.lastName,\n                                    competence: application.competenceID,\n                                    email: userInfo.email,\n                                }).then(() => {\n                                    console.log(\"application migration success!\")\n                                    alert(\"application migration success!\")\n                                    errorMsgInfoApplications = errorMsgInfoApplications.filter((value) => {\n                                        return value.userID !== split[orderOfData.userID];\n                                    })\n                                    applicationsSentToDB.push({id: split[orderOfData.userID]})\n                                }).catch((err) => {\n                                    console.log(err)\n                                })\n                                //using {application} and {userInfo}\n                                done = true;\n                            }\n\n                        })\n                        done = false;\n\n                    }, (err) => {\n                        console.log(err);\n                        alert(\"something went wrong\");\n                    });\n\n\n            }\n\n\n        } else if (SQLSTATE === \"MIGRATE_APPLICATION\") {\n            let applicationInfo = {};\n            incompleteApplications.forEach((application) => {\n                if (application.userID === split[orderOfData.userID]) {//found information\n                    console.log(application)\n                    applicationInfo = application\n\n                }\n\n            })\n            let competenceName = \"\";\n\n\n            if (orderOfData.compProfID >= 0) {\n                applicationInfo.compProfID = split[orderOfData.compProfID]\n            }\n            if (orderOfData.userID >= 0) {\n                applicationInfo.userID = split[orderOfData.userID]\n            }\n            if (orderOfData.competenceID >= 0) {\n\n\n                console.log(split[orderOfData.competenceID])\n                if (parseInt(split[orderOfData.competenceID]) === 1) {\n                    competenceName = \"A-skills\";\n                    applicationInfo.compName = competenceName;\n                }else if(parseInt(split[orderOfData.competenceID]) === 2){\n                    competenceName = \"B-skills\";\n                    applicationInfo.compName = competenceName;\n                }else if(parseInt(split[orderOfData.competenceID]) === 3){\n                    competenceName = \"C-skills\";\n                    applicationInfo.compName = competenceName;\n                }else if(parseInt(split[orderOfData.competenceID]) === 4){\n                    competenceName = \"D-skills\";\n                    applicationInfo.compName = competenceName;\n                }else {\n                    competenceName = \"E-skills\";\n                    applicationInfo.compName = competenceName;\n                }\n\n\n\n                if (compReason !== \"DONE_AND_SENT\") {\n                    if (applicationInfo.competenceID === undefined) {\n                        console.log(applicationInfo)\n                        applicationInfo.competenceID = [];\n                        applicationInfo.competenceID.push({\n                            \"name\": competenceName,\n                            \"year\": parseFloat(split[orderOfData.compYear])\n                        })\n\n                    } else {\n                        console.log(\"new comp: \" + competenceName)\n                        console.log(\"old comp: \" + applicationInfo.competenceID)\n                        applicationInfo.competenceID.push({\n                            \"name\": competenceName,\n                            \"year\": parseFloat(split[orderOfData.compYear])\n                        })\n                        console.log(applicationInfo)\n                    }\n                }\n                applicationsSentToDB.forEach((app) => {\n                    if (app.id === split[orderOfData.userID]) {\n\n                        //skip every other step\n                        compReason = \"DONE_AND_SENT\";\n                        //get email from allemail\n                        allEmails.forEach((val) => {\n                            if (val.userID === split[orderOfData.userID]) {\n                                //send to DB update post\n                                console.log(val)\n                                const instance = apiCall.apiAxios();\n                                instance.post('posts/updateskill', {\n                                    \"competence\": {\n                                        \"name\": competenceName,\n                                        \"year\": parseFloat(split[orderOfData.compYear])\n                                    },\n                                    \"email\": val.email,\n                                }).then(() => {\n                                    console.log(\"updated application migration success!\")\n                                    alert(\"updated application migration success!\")\n                                }).catch((err) => {\n                                    console.log(err)\n                                    alert(\"something went wrong in update\")\n                                })\n                            }\n                        })\n\n                    }\n                })\n\n\n\n\n\n            }\n            if (orderOfData.compYear >= 0) {\n                applicationInfo.compYear = split[orderOfData.compYear]\n            }\n            if (orderOfData.availableID >= 0) {\n                applicationInfo.availableID = split[orderOfData.availableID]\n            }\n            if (orderOfData.fromDate >= 0) {\n                applicationInfo.fromDate = split[orderOfData.fromDate]\n            }\n            if (orderOfData.toDate >= 0) {\n                applicationInfo.toDate = split[orderOfData.toDate]\n            }\n\n\n            console.log(Object.keys(applicationInfo).length);\n\n            if (compReason !== \"DONE_AND_SENT\") {\n                if (Object.keys(applicationInfo).length < 7) {\n                    incompleteApplications.push(applicationInfo)\n\n                    let errorMessage = \"The following attributes are missing to be able to migrate this application to the new system:\";\n                    if (!applicationInfo.compYear) {\n                        errorMessage = errorMessage + \" years_of_experience,\"\n                    }\n                    if (!applicationInfo.fromDate) {\n                        errorMessage = errorMessage + \" available from_date,\"\n                    }\n                    if (!applicationInfo.toDate) {\n                        errorMessage = errorMessage + \" available to_date,\"\n                    }\n                    if (!applicationInfo.competenceID) {\n                        errorMessage = errorMessage + \" competenceID,\"\n                    }\n\n                    errorMsgInfoApplications = errorMsgInfoApplications.filter((value) => {\n                        return value.userID !== split[orderOfData.userID];\n                    })\n                    errorMsgInfoApplications.push({\n                        \"userID\": split[orderOfData.userID],\n                        \"msg\": errorMessage\n                    })\n                    console.log(applicationInfo)\n                    console.log(incompleteApplications)\n                } else {\n                    console.log(\"DONE\")\n\n                    completedApplications.push(applicationInfo)\n\n                    let savedUser = {};\n                    completedUsers.forEach((user) => {\n                        if (user.userID === split[orderOfData.userID]) {//found information\n                            console.log(user)\n                            savedUser = user\n                        }\n\n                    })\n                    errorMsgInfoApplications = errorMsgInfoApplications.filter((value) => {\n                        return value.userID !== split[orderOfData.userID];\n                    })\n                    if (Object.keys(savedUser).length === 0) {\n                        console.log(\"APPLICATION DONE WAIT FOR USER\")\n\n                        errorMsgInfoApplications = errorMsgInfoApplications.filter((value) => {\n                            return value.userID !== split[orderOfData.userID];\n                        })\n                        errorMsgInfoApplications.push({\n                            userID: applicationInfo.userID,\n                            \"msg\": \"This application is ready to migrate to the new DB as soon as user with same userID/person_id has been migrated\"\n                        })\n\n                    } else {\n\n                        let skipWriteAgain = false;\n                        console.log(applicationsSentToDB)\n                        console.log(split[orderOfData.userID])\n                        applicationsSentToDB.forEach((val) => {\n                            if (parseInt(val.id) === parseInt(split[orderOfData.userID])) {\n                                console.log(val)\n                                skipWriteAgain = true\n                            }\n                        })\n                        if (skipWriteAgain === false) {\n                            console.log(\"CREATE APPLICATION AND SEND TO DB\")\n                            //call api\n\n                            const instance = apiCall.apiAxios();\n                            instance.post('posts', {\n                                startPeriod: applicationInfo.fromDate,\n                                endPeriod: applicationInfo.toDate,\n                                dateOfBirth: savedUser.dateOfBirth,\n                                status: \"unhandled\",\n                                firstName: savedUser.firstName,\n                                lastName: savedUser.lastName,\n                                competence: applicationInfo.competenceID,\n                                email: savedUser.email,\n                            }).then(() => {\n                                applicationsSentToDB.push({\"id\":split[orderOfData.userID]})\n                                console.log(\"application migration success!\")\n                                alert(\"application migration success!\")\n                            }).catch((err) => {\n                                console.log(err)\n                                alert(\"something went wrong\")\n                            })\n                        }\n                        skipWriteAgain = false;\n                    }\n\n\n                    console.log(applicationInfo)\n\n                }\n\n            }\n            compReason = \"\";\n        }\n    }\n\n\n    return (\n        <div className=\"wrapper\">\n\n            <input type=\"file\" onChange={(event) => {\n                handleFiles(event.target.files)\n            }}/>\n            <Formik\n                initialValues={{VALUES: \"\"}}\n                onSubmit={(data, {setSubmitting, resetForm}) => {\n\n                    setSubmitting(true);\n                    resetForm();\n\n                    if (data.VALUES.includes(\"person\") || data.VALUES.includes(\"competence_profile\") || data.VALUES.includes(\"availability\")) {\n                        migrationHandler(data.VALUES);\n                    }\n\n\n                    setSubmitting(false);\n                }}\n            >\n                {({values, isSubmitting}) => (\n                    <div>\n                        <Form>\n                            <div>\n                                <div>Insert sql code here:</div>\n                                <Field\n                                    placeholder=\"values\"\n                                    name=\"VALUES\"\n                                    type=\"input\"\n                                    as={TextField}\n                                />\n                            </div>\n\n                            <div>\n                                <Button disabled={isSubmitting} type=\"submit\">Get result</Button>\n                            </div>\n                            <pre>{JSON.stringify(values, null, 2)}</pre>\n                            <pre>Migration issues \"users\": {JSON.stringify(errorMsgInfo, null, 2)}</pre>\n                            <pre>Migration issues \"applications\": {JSON.stringify(errorMsgInfoApplications, null, 2)}</pre>\n\n                        </Form>\n                    </div>\n                )}\n\n\n            </Formik>\n\n\n        </div>\n    )\n}\n\nexport default MigrateFromOldDB;","import {Component} from \"react\";\nimport './App.css';\nimport {Route, Switch, Link} from \"react-router-dom\"\n\n//models\nimport ApiCall from './Model/apiCall';\nimport Model from './Model/model'\n\n//presenter\nimport {Expertise} from './Views/Expertise'\n//views\nimport Authentication from \"./Views/Authentication\";\nimport SignUpAdmin from \"./Views/SignUpAdmin\";\nimport AdminApplications from \"./Views/AdminApplications\";\nimport Header from \"./Views/Header\";\nimport {Page404} from \"./Views/ErrorPages\";\n\n\nimport MigrateFromOldDB from \"./Views/MigrateFromOldDB\";\n\n\n\n/**\n * Main file for the frontend\n * Handles initial import of the model and routing of the frontend app\n */\nclass App extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            apiCall: new ApiCall(),\n            model: new Model()\n        }\n    }\n\n    render()\n    {\n        return (\n            <div className=\"applicationApp\">\n                <header className=\"recruitmentApp\">\n                    <Header/>\n                </header>\n                <Switch>\n                    <Route\n                        exact path=\"/\"\n                        render={() => <Authentication apiCall={this.state.apiCall}/>}\n                    />\n                    <Route\n                        exact path=\"/admin/signup\"\n                        render={() => <SignUpAdmin/>}\n                    />\n                    <Route\n                        exact path=\"/user/application\"\n                        render={() => <Expertise model={this.state.model} apiCall={this.state.apiCall}/>}\n                    />\n                    <Route\n                        exact path=\"/admin/applications\"\n                        render={() => <AdminApplications apiCall={this.state.apiCall}/>}\n                    />\n                    <Route\n\n                        exact path=\"/admin/Migrate\"\n                        render={() => <MigrateFromOldDB apiCall={this.state.apiCall}/>}\n                    />\n\n                    <Route\n                        exact path=\"*\"\n                        render={() => <Page404/>}\n                    />\n                </Switch>\n\n            </div>\n        );\n\n    }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState =\n    {\n        userInfo: [\n            {\n                isLoggedIn: false,\n                role: null,\n                fname: \"\",\n                lname: \"\",\n                dateOfBirth: \"\",\n                email: \"\",\n            }\n        ]\n    }\n/**\n * A reducer that handles login and signup\n * @param state the current state of this reducer\n * @param action the action that is to be performed\n * @returns {{userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}]}}\n */\nconst UserReducer = (state = initState, action) => {\n    switch (action.type) {\n        case \"LOG_IN_USER\":\n            return {\n\n                userInfo: [\n                    {\n                        isLoggedIn: true,\n                        role: action.role,\n                        fname: action.fname,\n                        lname: action.lname,\n                        dateOfBirth: action.dateOfBirth,\n                        email: action.email,\n                    }\n                ]\n\n            };\n        case \"LOG_OUT_USER\":\n            return {\n\n                userInfo: [\n                    {\n                        isLoggedIn: false,\n                        role: null,\n                        fname: \"\",\n                        lname: \"\",\n                        dateOfBirth: \"\",\n                        email: \"\",\n                    }\n                ]\n\n            };\n        default:\n            return state;\n\n    }\n}\n\nexport default UserReducer;","import { combineReducers } from \"redux\";\nimport UserReducer from \"./UserReducer\";\n\n/**\n * This component combines all reducers in this Redux store\n * @type {Reducer<CombinedState<{UserReducer: ({userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}]}|{userInfo: [{fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}]}|{userInfo: [{fname: string|*, lname: string|*, role: *, isLoggedIn: boolean, dateOfBirth: *, email: string}]}|{userInfo: [{fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}]})}>>}\n */\nexport const AllReducers = combineReducers({\n    UserReducer\n})","import {applyMiddleware, compose, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport { AllReducers } from \"./Reducers\"\n\n/**\n * Config Used to persist the redux store\n * @type {{storage, key: string}}\n */\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\n/**\n * A persisted combined reducer\n * @type {Reducer<CombinedState<{UserReducer: ({userInfo: {fname: (string|*), lname: (string|*), role: *, isLoggedIn: boolean, dateOfBirth: *, email: *}[]}|{userInfo: {fname: string, lname: string, role: null, isLoggedIn: boolean, dateOfBirth: string, email: string}[]}|{userInfo: {fname: (string|*), lname: (string|*), role: *, isLoggedIn: boolean, dateOfBirth: *, email: string}[]})}> & PersistPartial, unknown>}\n */\nconst persistedReducer = persistReducer(persistConfig, AllReducers)\n\n\nexport const ReduxStore = createStore(persistedReducer, applyMiddleware(thunk));\nexport const Persistor = persistStore(ReduxStore)\n","import React from 'react';\nimport { useLocation} from 'react-router-dom';\nimport { get } from 'lodash';\nimport { Page401, Page404, Page500, Page501, Page503 } from './Views/ErrorPages';\n/**\n * Handles API errors and presents appropriate view.\n * @param {Object} children \n * @returns Graphical view component\n */\nconst ErrorHandler = ({ children }) => {\n  const location = useLocation();\n\n  switch (get(location.state, 'errorStatusCode')) {\n    case 404:\n      return <Page404/>\n    case 401:\n      return <Page401/>\n    case 500:\n      return <Page500/>\n    case 501:\n      return <Page501/>\n    case 503:\n      return <Page503/>\n\n    default:\n      return children\n  }\n};\n\nexport default ErrorHandler;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {ReduxStore, Persistor} from \"./Model/Redux\"\nimport {BrowserRouter} from \"react-router-dom\";\nimport {PersistGate} from 'redux-persist/integration/react'\nimport ErrorHandler from './ErrorHandler'\n\nReactDOM.render(\n    <Provider store={ReduxStore}>\n        <PersistGate loading={null} persistor={Persistor}>\n            <BrowserRouter>\n                <ErrorHandler>\n                    <App/>\n                </ErrorHandler>\n            </BrowserRouter>\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}